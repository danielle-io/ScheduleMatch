<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Embedding demo: integration checks</title>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.js"></script>
    <link href="/demo/demo-styles.css" rel="stylesheet">
</head>
<body class="trouble">

    <% var slug = 'integration'; %>
    <%- include nav.ejs %>

    <h1>Availability Viewer</h1>
    <h2>default</h2>
    <div id="cronofy-availability-viewer-three"></div>
    <h2>multi_select with reload() option</h2>
    <div id="cronofy-availability-viewer"></div>
    <button id="cronofy-availability-query">New Query</button>
    <h2>multi_select with max_selection_count of 4</h2>
    <div id="cronofy-availability-viewer-two"></div>
    <h2>no_confirm</h2>
    <div id="cronofy-availability-viewer-four"></div>
    <h2>missing availability_query option</h2>
    <div id="cronofy-availability-viewer-five"></div>
    
    <hr>
    
    <h1>Agenda View</h1>
    <h2>default</h2>
    <div id="cronofy-agenda-view"></div>
    <h2>custom colours</h2>
    <div id="cronofy-agenda-view-two"></div>
    
    <hr>
    
    <h1>Availability Rules</h1>
    <h2>default</h2>
    <div id="cronofy-availability-rules"></div>
    <h2>default</h2>
    <div id="cronofy-availability-rules-two"></div>
    <h2>New rule</h2>
    <div id="cronofy-availability-rules-three"></div>
    
    <hr>
    
    <h1>Slot Picker</h1>
    <h2>default</h2>
    <div id="cronofy-slot-picker"></div>
    <h2>no_confirm</h2>
    <div id="cronofy-slot-picker-two"></div>
    
    <hr>
    
    <h1>Calendar Sync</h1>
    <h2>default</h2>
    <div id="cronofy-calendar-sync"></div>
    <h2>demo</h2>
    <div id="cronofy-calendar-sync-two"></div>
    <h2>no token</h2>
    <div id="cronofy-calendar-sync-three"></div>

    <script src="../build/CronofyElements.dev.js"></script>

    <script>
        console.log('loading elements...');
        const locale = 'fr';

        const utcOffset = moment().utcOffset();
        const invertedOffset =
            Math.sign(utcOffset) === -1 ? Math.abs(utcOffset) : 0 - utcOffset;
        const offset = invertedOffset / 60;

        const today = moment()
            .add(1, "day")
            .seconds(0);
        const startDay = today
            .startOf('isoWeek')
            .subtract(1, "day")
            .add(7,"day");

        const offsetTime = function(days, time) {
            const timeString = `${startDay.clone().format("YYYY-MM-DD")}T${time}:00Z`;
            const output = moment(timeString)
                .add(days, "days")
                .add(offset, "hours");
            return output.utc().format();
        };
        
        const Viewer = CronofyElements.AvailabilityViewer({
            element_token: "<%= availability_token %>",
            target_id: 'cronofy-availability-viewer',
            api_domain:"<%= api_domain %>",
            availability_query: {
                participants: [
                    {
                        required: "all",
                        members: [
                            { sub: "<%= sub %>" }
                        ]
                    }
                ],
                required_duration: { minutes: 60 },
                available_periods: [
                    { start: offsetTime(1, "09:00"), end: offsetTime(1, "17:30") },
                    { start: offsetTime(2, "08:00"), end: offsetTime(2, "17:30") },
                    { start: offsetTime(3, "09:00"), end: offsetTime(3, "17:30") },
                    { start: offsetTime(4, "09:00"), end: offsetTime(4, "17:30") },
                    { start: offsetTime(5, "09:00"), end: offsetTime(5, "17:30") },
                    { start: offsetTime(8, "09:00"), end: offsetTime(8, "17:30") },
                    { start: offsetTime(9, "09:00"), end: offsetTime(9, "17:30") },
                    { start: offsetTime(10, "09:00"), end: offsetTime(10, "17:30") },
                    { start: offsetTime(11, "09:00"), end: offsetTime(11, "17:30") },
                    { start: offsetTime(12, "09:00"), end: offsetTime(12, "17:30") }
                ],
            },
            config: {
                start_time:"08:00",
                end_time: "18:00",
                interval: 30,
                mode: "multi_select", // default | multi_select | no_confirm
            },
            styles: {
                prefix: "AV1"
            },
            callback: slot => console.log('callback',slot),
            // locale: locale,
            // demo: true
        });

        const newQuery = document.querySelector('#cronofy-availability-query');
        newQuery.addEventListener('click',loadNewQuery,false);

        function loadNewQuery() {
            const newConfig = {
                start_time: `0${Math.ceil(Math.random() * (9 - 7) + 7)}:${Math.ceil(Math.random() * (3 - 0) + 0)}0`,
                end_time: `${Math.ceil(Math.random() * (18 - 15) + 15)}:${Math.ceil(Math.random() * (5 - 0) + 0)}0`,
                interval: 15
            };

            console.log(newConfig);
            Viewer.update({
                config: newConfig
            });
        }
        
        const ViewerTwo = CronofyElements.AvailabilityViewer({
            element_token: "<%= availability_token %>",
            target_id: 'cronofy-availability-viewer-two',
            api_domain:"<%= api_domain %>",
            availability_query: {
                participants: [
                    {
                        required: "all",
                        members: [
                            { sub: "<%= sub %>" }
                        ]
                    }
                ],
                required_duration: { minutes: 60 },
                available_periods: [
                    { start: offsetTime(1, "09:00"), end: offsetTime(1, "17:30") },
                    { start: offsetTime(2, "08:00"), end: offsetTime(2, "17:30") },
                    { start: offsetTime(3, "09:00"), end: offsetTime(3, "17:30") },
                    { start: offsetTime(4, "09:00"), end: offsetTime(4, "17:30") },
                    { start: offsetTime(5, "09:00"), end: offsetTime(5, "17:30") }
                ],
            },
            config: {
                start_time:"09:00",
                end_time: "14:00",
                interval: 15,
                mode: "multi_select",
                max_selection_count: 4
            },
            callback: slot => console.log('AV2 callback',slot),
            demo: true
        });
        
        const ViewerThree = CronofyElements.AvailabilityViewer({
            element_token: "<%= availability_token %>",
            target_id: 'cronofy-availability-viewer-three',
            api_domain:"<%= api_domain %>",
            availability_query: {
                participants: [
                    {
                        required: "all",
                        members: [
                            { sub: "<%= sub %>" }
                        ]
                    }
                ],
                required_duration: { minutes: 60 },
                available_periods: [
                    { start: offsetTime(1, "09:00"), end: offsetTime(1, "17:30") },
                    { start: offsetTime(2, "08:00"), end: offsetTime(2, "17:30") },
                    { start: offsetTime(3, "09:00"), end: offsetTime(3, "17:30") },
                    { start: offsetTime(4, "09:00"), end: offsetTime(4, "17:30") },
                    { start: offsetTime(5, "09:00"), end: offsetTime(5, "17:30") }
                ],
            },
            config: {
                start_time:"10:00",
                end_time: "13:00",
                interval: 60
            },
            callback: slot => console.log('AV3 callback',slot),
            demo: true
        });
        
        const ViewerFour = CronofyElements.AvailabilityViewer({
            element_token: "<%= availability_token %>",
            target_id: 'cronofy-availability-viewer-four',
            api_domain:"<%= api_domain %>",
            availability_query: {
                participants: [
                    {
                        required: "all",
                        members: [
                            { sub: "<%= sub %>" }
                        ]
                    }
                ],
                required_duration: { minutes: 60 },
                available_periods: [
                    { start: offsetTime(1, "09:00"), end: offsetTime(1, "17:30") },
                    { start: offsetTime(2, "08:00"), end: offsetTime(2, "17:30") },
                    { start: offsetTime(3, "09:00"), end: offsetTime(3, "17:30") },
                    { start: offsetTime(4, "09:00"), end: offsetTime(4, "17:30") },
                    { start: offsetTime(5, "09:00"), end: offsetTime(5, "17:30") }
                ],
            },
            config: {
                start_time:"10:00",
                end_time: "13:00",
                interval: 60,
                mode: "no_confirm"
            },
            callback: slot => console.log('AV4 callback',slot),
            demo: true
        });

        CronofyElements.Agenda({
            element_token: "<%= agenda_token %>",
            target_id: 'cronofy-agenda-view',
            api_domain:"<%= api_domain %>",
            demo: true,
            styles: {
                prefix:"AG1"
            }
        });

        CronofyElements.Agenda({
            element_token: "<%= agenda_token %>",
            target_id: 'cronofy-agenda-view-two',
            api_domain:"<%= api_domain %>",
            // locale: locale,
            demo: true,
            styles: {
                colors:{ calendars: ['#0074d9','#ffdc00'] },
                prefix:"AG2"
            }
        });

        CronofyElements.AvailabilityRules({
            element_token: "<%= rules_token %>",
            target_id: 'cronofy-availability-rules',
            api_domain:"<%= api_domain %>",
            availability_rule_id: "work_hours",
            tzid: "Etc/UTC",
            config: {
                start_time:"08:00",
                end_time: "18:00",
                duration: 15
            },
            styles: {
                prefix: "AR1",
            },
            demo: true
        });
        
        CronofyElements.AvailabilityRules({
            element_token: "<%= rules_token %>",
            target_id: 'cronofy-availability-rules-two',
            api_domain:"<%= api_domain %>",
            availability_rule_id: "work_hours",
            tzid: "Etc/UTC",
            config: {
                start_time:"12:00",
                end_time: "15:00",
                duration: 30
            },
            styles: {
                prefix: "AR2",
                colors: {available: "teal"}
            }
        });
        
        CronofyElements.AvailabilityRules({
            element_token: "<%= rules_token %>",
            target_id: 'cronofy-availability-rules-three',
            api_domain:"<%= api_domain %>",
            availability_rule_id: `unknown_new_id_${Math.random().toString(36).substring(2, 15)}`,
            tzid: "Etc/UTC",
            config: {
                start_time:"12:00",
                end_time: "15:00",
                duration: 30
            },
            styles: {
                prefix: "AR3"
            }
        });

        const slotTimes = function(days, time) {
            const timeString = `${moment().utc().format("YYYY-MM-DD")}T${time}:00Z`;
            const output = moment(timeString)
                .add(days, "days");
            return output.utc().format();
        };

        CronofyElements.SlotPicker({
            element_token: "<%= slot_picker_token %>",
            target_id: 'cronofy-slot-picker',
            api_domain:"<%= api_domain %>",
            availability_query: {
                participants: [
                    {
                        required: "all",
                        members: [
                            { sub: "<%= sub %>" }
                        ]
                    }
                ],
                required_duration: { minutes: 30 },
                available_periods: [
                    { start: slotTimes(1,"07:00"), end: slotTimes(1,"12:00") },
                    { start: slotTimes(2,"09:00"), end: slotTimes(2,"13:00") },
                    { start: slotTimes(2,"14:00"), end: slotTimes(2,"17:00") },
                    { start: slotTimes(3,"09:00"), end: slotTimes(3,"13:00") },
                    { start: slotTimes(3,"14:00"), end: slotTimes(3,"17:00") }
                ]
            },
            styles: {
                prefix: "SP1"
            },
            callback: slot => console.log('callback',slot),
            // locale: locale,
            // demo: true
        });

        CronofyElements.SlotPicker({
            element_token: "<%= slot_picker_token %>",
            target_id: 'cronofy-slot-picker-two',
            api_domain:"<%= api_domain %>",
            availability_query: {
                participants: [
                    {
                        required: "all",
                        members: [
                            { sub: "<%= sub %>" }
                        ]
                    }
                ],
                required_duration: { minutes: 30 },
                available_periods: [
                    { start: slotTimes(1,"23:00"), end: slotTimes(2,"01:00") },
                    { start: slotTimes(2,"23:00"), end: slotTimes(3,"01:00") }
                ]
            },
            config: {
                mode: 'no_confirm'
            },
            styles: {
                prefix: "SP2",
                padding: "20px"
            },
            callback: slot => console.log('callback',slot)
        });

        CronofyElements.CalendarSync({
            element_token: "<%= cal_sync_token %>",
            target_id: 'cronofy-calendar-sync',
            app_domain:"<%= app_domain %>",
            api_domain:"<%= api_domain %>",
            data_center: "us",
            // authorization_url: "http://localhost:8080/auth/cronofy",
            // authorization_url: "/auth/cronofy",
            authorization: {
                redirect_uri: "http://localhost:8080/",
                client_id: "<%= client_id %>",
                scope: "read_only"
            },
            tzid: "Etc/UTC",
            demo: false,
            callback: cb => {
                console.log("callback", cb);
            }
        });
        
        CronofyElements.CalendarSync({
            element_token: "<%= cal_sync_token %>",
            target_id: 'cronofy-calendar-sync-two',
            authorization: {
                redirect_uri: "http://localhost:8080/",
                client_id: "<%= client_id %>",
                scope: "read_only"
            },
            tzid: "Etc/UTC",
            demo: true,
            callback: cb => {
                console.log("callback", cb);
            }
        });
        CronofyElements.CalendarSync({
            target_id: 'cronofy-calendar-sync-three',
            authorization: {
                redirect_uri: "http://localhost:8080/",
                client_id: "<%= client_id %>",
                scope: "read_only"
            },
            tzid: "Etc/UTC",
            callback: cb => {
                console.log("callback", cb);
            }
        });

        console.log('done.');
    </script>

</body>
</html>
