require("@babel/polyfill");
const fetch = require("node-fetch");
const express = require("express");
const app = express();
const path = require("path");

const url = require("url");
const querystring = require("querystring");

const env = require("../src/js/env");
const apiDomain = env.API_DOMAIN || "https://api.cronofy.com";
const appDomain = env.APP_DOMAIN || "https://app.cronofy.com";

console.log("Firing up server...");

const getData = async (url, options) =>
    await fetch(url, options)
        .then(async res => await res.json())
        .catch(err => console.error(err));

const baseUrl = `${apiDomain}/v1/element_tokens`;

const singleTokenOptions = {
    method: "POST",
    headers: {
        "Content-Type": "application/json; charset=utf-8",
        Authorization: `Bearer ${env.CLIENT_SECRET}`
    },
    body: JSON.stringify({
        version: "1",
        permissions: [
            "agenda",
            "availability",
            "managed_availability",
            "account_management"
        ],
        subs: [env.SUB],
        origin: "http://localhost:8080"
    })
};

const calendarSyncTokenOptions = {
    method: "POST",
    headers: {
        "Content-Type": "application/json; charset=utf-8",
        Authorization: `Bearer ${env.CLIENT_SECRET}`
    },
    body: JSON.stringify({
        version: "1",
        permissions: ["account_management"],
        subs: [env.SUB],
        origin: "http://localhost:8080"
    })
};

const rulesTokenOptions = {
    method: "POST",
    headers: {
        "Content-Type": "application/json; charset=utf-8",
        Authorization: `Bearer ${env.CLIENT_SECRET}`
    },
    body: JSON.stringify({
        version: "1",
        permissions: ["managed_availability"],
        subs: [env.SUB],
        origin: "http://localhost:8080"
    })
};

const agendaTokenOptions = {
    method: "POST",
    headers: {
        "Content-Type": "application/json; charset=utf-8",
        Authorization: `Bearer ${env.CLIENT_SECRET}`
    },
    body: JSON.stringify({
        version: "1",
        permissions: ["agenda"],
        subs: [env.SUB],
        origin: "http://localhost:8080"
    })
};

const availabilityViewerTokenOptions = {
    method: "POST",
    headers: {
        "Content-Type": "application/json; charset=utf-8",
        Authorization: `Bearer ${env.CLIENT_SECRET}`
    },
    body: JSON.stringify({
        version: "1",
        permissions: ["availability"],
        subs: [env.SUB],
        origin: "http://localhost:8080"
    })
};

const slotPickerTokenOptions = {
    method: "POST",
    headers: {
        "Content-Type": "application/json; charset=utf-8",
        Authorization: `Bearer ${env.CLIENT_SECRET}`
    },
    body: JSON.stringify({
        version: "1",
        permissions: ["availability"],
        subs: [env.SUB],
        origin: "http://localhost:8080"
    })
};

app.use(express.static(__dirname + "/../"));
app.set("view engine", "ejs");
app.set("views", path.join(__dirname, "/../demo"));

app.get("/", async (req, res, next) => {
    const codeQuery = req.query.code;

    if (codeQuery) {
        console.log("there is a `code` query:", codeQuery);
        const codeResponse = await getData(`${apiDomain}/oauth/token`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json; charset=utf-8"
            },
            body: JSON.stringify({
                client_id: env.CLIENT_ID,
                client_secret: env.CLIENT_SECRET,
                grant_type: "authorization_code",
                code: codeQuery,
                redirect_uri: "http://localhost:8080/"
            })
        });
        console.log("codeResponse", codeResponse);
        return res.redirect("/");
    }

    // const availability_token = await getData(url, availabilityOptions);

    // const agenda_token = await getData(url, agendaOptions);

    const single_token = await getData(baseUrl, singleTokenOptions).catch(
        error => {
            next(error);
        }
    );

    return res.render("index", {
        single_token: single_token.element_token.token,
        // availability_token: availability_token.element_token.token,
        // agenda_token: agenda_token.element_token.token,
        api_domain: apiDomain,
        app_domain: appDomain,
        sub: env.SUB,
        client_id: env.CLIENT_ID
    });
});

app.get("/availability-viewer", async (req, res) => {
    const availability_token = await getData(
        baseUrl,
        availabilityViewerTokenOptions
    );
    return res.render("availability-viewer", {
        availability_token: availability_token.element_token.token,
        api_domain: apiDomain,
        app_domain: appDomain,
        sub: env.SUB,
        client_id: env.CLIENT_ID
    });
});

app.get("/rules", async (req, res) => {
    const rules_token = await getData(baseUrl, rulesTokenOptions);
    return res.render("rules", {
        rules_token: rules_token.element_token.token,
        api_domain: apiDomain,
        app_domain: appDomain,
        sub: env.SUB,
        client_id: env.CLIENT_ID
    });
});

app.get("/agenda", async (req, res) => {
    const agenda_token = await getData(baseUrl, agendaTokenOptions);
    return res.render("agenda", {
        agenda_token: agenda_token.element_token.token,
        api_domain: apiDomain
    });
});

app.get("/integration", async (req, res) => {
    const availability_token = await getData(
        baseUrl,
        availabilityViewerTokenOptions
    );
    const agenda_token = await getData(baseUrl, agendaTokenOptions);
    const rules_token = await getData(baseUrl, rulesTokenOptions);
    const slot_picker_token = await getData(baseUrl, slotPickerTokenOptions);
    const cal_sync_token = await getData(baseUrl, calendarSyncTokenOptions);
    return res.render("integration", {
        agenda_token: agenda_token.element_token.token,
        availability_token: availability_token.element_token.token,
        rules_token: rules_token.element_token.token,
        slot_picker_token: slot_picker_token.element_token.token,
        cal_sync_token: cal_sync_token.element_token.token,
        api_domain: apiDomain,
        app_domain: appDomain,
        sub: env.SUB,
        client_id: env.CLIENT_ID
    });
});

app.get("/crossbrowser", async (req, res) => {
    const availability_token = await getData(
        baseUrl,
        availabilityViewerTokenOptions
    );
    const agenda_token = await getData(baseUrl, agendaTokenOptions);
    const rules_token = await getData(baseUrl, rulesTokenOptions);
    const slot_picker_token = await getData(baseUrl, slotPickerTokenOptions);
    const cal_sync_token = await getData(baseUrl, calendarSyncTokenOptions);
    return res.render("crossbrowser", {
        agenda_token: agenda_token.element_token.token,
        availability_token: availability_token.element_token.token,
        rules_token: rules_token.element_token.token,
        slot_picker_token: slot_picker_token.element_token.token,
        cal_sync_token: cal_sync_token.element_token.token,
        api_domain: apiDomain,
        app_domain: appDomain,
        sub: env.SUB,
        client_id: env.CLIENT_ID
    });
});

app.get("/slot-picker", async (req, res) => {
    const slot_picker_token = await getData(baseUrl, slotPickerTokenOptions);
    return res.render("slot-picker", {
        slot_picker_token: slot_picker_token.element_token.token,
        api_domain: apiDomain,
        app_domain: appDomain,
        sub: env.SUB,
        client_id: env.CLIENT_ID
    });
});

app.get("/calendar-sync", async (req, res) => {
    const cal_sync_token = await getData(baseUrl, calendarSyncTokenOptions);
    return res.render("calendar-sync", {
        cal_sync_token: cal_sync_token.element_token.token,
        api_domain: apiDomain,
        app_domain: appDomain,
        sub: env.SUB,
        client_id: env.CLIENT_ID
    });
});

app.listen(8080);

console.log("serving on port 8080 - http://localhost:8080/");
