<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Embedding demo: availability viewer</title>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.js"></script>
    <link href="/demo/demo-styles.css" rel="stylesheet">
</head>
<body class="trouble">

    <% var slug = 'availability-viewer'; %>
    <%- include nav.ejs %>

    <h1>Availability Viewer</h1>
    <div id="cronofy-availability-viewer"></div>
    <button id="cronofy-availability-query">New Query</button>
    <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Recusandae, doloribus eaque? Animi, velit culpa nostrum omnis vitae rem placeat ut mollitia autem porro! Qui molestiae porro rerum similique, aliquid deleniti!</p>
    <div id="cronofy-availability-viewer-two"></div>
    <hr>
    <div id="cronofy-availability-viewer-three"></div>
    <div class="wrapper">
        <div class="column">
            <h2>Consectetur adipisicing elit</h2>
            <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. <a href="/">Voluptate sed ex totam odit</a> quae hic voluptatibus, quisquam dicta animi laborum velit laboriosam, placeat suscipit tenetur voluptates! Illo tempora minus animi.</p>
            <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Quidem consequuntur repudiandae nesciunt, totam dicta earum deleniti magnam eveniet eligendi sunt adipisci veniam esse aliquid aperiam corporis optio fuga tempora sit!</p>
        </div>
        <div class="column">
            <h2>Est deserunt non quis do quis nostrud ad exercitation proident incididunt.</h2>
            <p>Excepturi dicta neque ut, a expedita quaerat, tempore dolor placeat quibusdam cumque ipsam cum officia voluptate, ea fuga optio necessitatibus inventore tempora?</p>
            <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Natus nisi eveniet voluptas provident esse beatae minus at error dignissimos neque? Temporibus velit numquam aut labore porro neque ipsum, deleniti a?</p>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Eum sunt eligendi, error quos nulla dolorem alias corrupti iste fugiat deleniti nam unde, porro provident a voluptatem at voluptates, dolores sed!</p>
        </div>
    </div>
    <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Natus nisi eveniet voluptas provident esse beatae minus at error dignissimos neque? Temporibus velit numquam aut labore porro neque ipsum, deleniti a?</p>
    <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Debitis saepe maxime corporis nemo hic rerum porro in repudiandae? Libero eligendi impedit reiciendis exercitationem fuga ex eos aliquid itaque facere corrupti.</p>    
    <hr>
    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Eum sunt eligendi, error quos nulla dolorem alias corrupti iste fugiat deleniti nam unde, porro provident a voluptatem at voluptates, dolores sed!</p>
    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptatum commodi fuga laboriosam? Quas officiis doloremque iure modi, ipsam dolore ad illum saepe et voluptatum quis tempore ullam dolor, sequi nulla!</p>
    <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Eum sunt eligendi, error quos nulla dolorem alias corrupti iste fugiat deleniti nam unde, porro provident a voluptatem at voluptates, dolores sed!</p>

    <script src="../build/CronofyElements.dev.js"></script>
    <%# <script src="../build/CronofyElements.v1.7.5.js"></script> %>
    <%# <script src="https://elements.cronofy.com/js/CronofyElements.v0.10.9.js"></script> %>

    <script>
        console.log('loading elements...');
        const locale = 'en';

        const display = {
            // 0 = don't show the element
            // 1 = show the element
            one: 1,
            two: 1,
            three: 1
        }

        const utcOffset = moment().utcOffset();
        const invertedOffset =
            Math.sign(utcOffset) === -1 ? Math.abs(utcOffset) : 0 - utcOffset;
        const offset = invertedOffset / 60;

        const today = moment()
            .add(1, "day")
            .seconds(0);
        const startDay = today
            .clone()
            .startOf('isoWeek')
            .subtract(1, "day")
            .add(7,"day");

        const simpleOffsetTime = function(days,time) {
            const timeString = `${moment().seconds(0).format("YYYY-MM-DD")}T${time}:00Z`;
            const output = moment(timeString)
                .add(days, "days")
                .add(offset, "hours");
            return output.utc().format();
        }

        const offsetTime = function(days, time) {
            const timeString = `${startDay.clone().format("YYYY-MM-DD")}T${time}:00Z`;
            const output = moment(timeString)
                .add(days, "days")
                .add(offset, "hours");
            return output.utc().format();
        };

        let availablePeriods = [
            { start: offsetTime(1, "09:00"), end: offsetTime(1, "17:30") },
            { start: offsetTime(2, "09:00"), end: offsetTime(2, "17:30") },
            { start: offsetTime(3, "09:00"), end: offsetTime(3, "17:30") },
            { start: offsetTime(4, "05:00"), end: offsetTime(4, "20:00") },
            { start: offsetTime(5, "05:00"), end: offsetTime(5, "17:30") },
            { start: offsetTime(8, "09:00"), end: offsetTime(8, "19:30") },
            { start: offsetTime(9, "09:00"), end: offsetTime(9, "17:30") },
            { start: offsetTime(10, "09:00"), end: offsetTime(10, "17:30") },
            { start: offsetTime(11, "09:00"), end: offsetTime(11, "17:30") },
            { start: offsetTime(12, "09:00"), end: offsetTime(12, "17:30") },
            { start: offsetTime(15, "08:00"), end: offsetTime(19, "19:30") }
        ];

        // availablePeriods = [
        //     { start: "2019-11-11T09:00:00Z", end: "2019-11-11T10:00:00Z" },
        //     { start: "2019-11-11T11:00:00Z", end: "2019-11-11T12:00:00Z" },
        //     { start: "2019-11-11T16:00:00Z", end: "2019-11-11T17:00:00Z" },
        //     { start: "2019-11-12T06:00:00Z", end: "2019-11-12T19:00:00Z" },
        //     { start: "2019-11-13T06:00:00Z", end: "2019-11-13T19:00:00Z" },
        //     { start: "2019-11-14T06:00:00Z", end: "2019-11-14T19:00:00Z" }
        // ];
        
        // availablePeriods = [
        //     { start: "2020-01-23T16:00:00Z", end: "2020-02-14T:23:99Z" }
        // ];

        // console.log('availablePeriods', availablePeriods);


        if (display.one) {
            const Viewer = CronofyElements.AvailabilityViewer({
                element_token: "<%= availability_token %>",
                target_id: 'cronofy-availability-viewer',
                api_domain:"<%= api_domain %>",
                availability_query: {
                    participants: [
                        {
                            required: "all",
                            members: [
                                //{ sub: "<%= sub %>", managed_availability: "true" }
                                { sub: "<%= sub %>", managed_availability: "true" }
                            ]
                        }
                    ],
                    required_duration: { minutes: 60 },
                    // required_duration: { minutes: 'fasdgadsgsadg' },
                    available_periods: availablePeriods,
                },
                config: {
                    start_time: "08:00",
                    //start_time: "38:00",
                    end_time: "18:00",
                    interval: 15,
                    mode: "multi_select", // default | multi_select | no_confirm
                    // week_start_day: "Monday"
                    //logs: "error"
                    // slot_selection: "unrestricted"
                },
                styles: {
                    prefix: "AV1"
                },
                tzid: "Europe/London",
                locale: locale,
                // locale: 'keys',
                // translations: {
                //     en: {
                //         availability_viewer: {
                //             available: 'Override available'
                //         }
                //     }
                // },
                callback: cb => console.log('callback',cb.notification.slot),
                //demo: true
            });

            const newQuery = document.querySelector('#cronofy-availability-query');
            newQuery.addEventListener('click',loadNewQuery,false);

            function randomFromArray(array) {
                const randomIndex = Math.floor(Math.random()*array.length);
                return array[randomIndex]
            }

            function loadNewQuery() {
                const startOptions = [
                    "05:00","05:30",
                    "06:00","06:30",
                    "07:00","07:30",
                    "08:00","08:30",
                    "09:00","09:30",
                    "10:00","10:30",
                    "11:00","11:30"
                ];
                const endOptions = [
                    "15:00","15:30",
                    "16:00","16:30",
                    "17:00","17:30",
                    "18:00","18:30",
                    "19:00","19:30",
                    "20:00","20:30",
                    "21:00","21:30"
                ];
                const intervalOptions = [15,30,60];
                const newConfig = {
                    start_time: randomFromArray(startOptions),
                    end_time: randomFromArray(endOptions),
                    interval: randomFromArray(intervalOptions)
                };

                console.log(newConfig);
                Viewer.update({
                    config: newConfig
                });
            }
        }

        if (display.two) {
            const ViewerTwo = CronofyElements.AvailabilityViewer({
                element_token: "<%= availability_token %>",
                target_id: 'cronofy-availability-viewer-two',
                api_domain:"<%= api_domain %>",
                availability_query: {
                    participants: [
                        {
                            required: "all",
                            members: [
                                { sub: "<%= sub %>" }
                            ]
                        }
                    ],
                    required_duration: { minutes: 60 },
                    available_periods: [
                        { start: offsetTime(1, "09:00"), end: offsetTime(1, "17:30") },
                        { start: offsetTime(2, "08:00"), end: offsetTime(2, "17:30") },
                        { start: offsetTime(3, "09:00"), end: offsetTime(3, "17:30") },
                        { start: offsetTime(4, "09:00"), end: offsetTime(4, "17:30") },
                        { start: offsetTime(5, "09:00"), end: offsetTime(5, "17:30") }
                    ],
                },
                config: {
                    start_time:"09:00",
                    end_time: "14:00",
                    interval: 15,
                    mode: "multi_select",
                    max_selection_count: 4
                },
                callback: slot => console.log('AV2 callback',slot),
                demo: true,
                locale: locale,
            });
        }

        if (display.three) {
            const ViewerThree = CronofyElements.AvailabilityViewer({
                element_token: "<%= availability_token %>",
                target_id: 'cronofy-availability-viewer-three',
                api_domain:"<%= api_domain %>",
                availability_query: {
                    participants: [
                        {
                            required: "all",
                            members: [
                                { sub: "<%= sub %>" }
                            ]
                        }
                    ],
                    required_duration: { minutes: 60 },
                    available_periods: [
                        { start: offsetTime(1, "09:00"), end: offsetTime(1, "17:30") },
                        { start: offsetTime(2, "08:00"), end: offsetTime(2, "17:30") },
                        { start: offsetTime(3, "09:00"), end: offsetTime(3, "17:30") },
                        { start: offsetTime(4, "09:00"), end: offsetTime(4, "17:30") },
                        { start: offsetTime(5, "09:00"), end: offsetTime(5, "17:30") }
                    ],
                },
                config: {
                    start_time:"10:00",
                    end_time: "13:00",
                    interval: 60
                },
                callback: slot => console.log('AV3 callback',slot),
                demo: true,
                locale: locale,
            });
        }

        console.log('done.');
    </script>

</body>
</html>
