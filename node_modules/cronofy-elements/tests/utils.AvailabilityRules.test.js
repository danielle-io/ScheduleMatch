import * as utils from "../src/js/helpers/utils.AvailabilityRules";

describe("Utilities: AvailabilityRules", () => {
    // buildSlotID
    it("builds a correct slot ID", () => {
        // Correctly pads single-digit numbers
        expect(utils.buildSlotID(1, 2)).toEqual("01_02");
        // Correctly pads (or doesn't pad) double-digit numbers
        expect(utils.buildSlotID(12, 42)).toEqual("12_42");
        // Works with strings
        expect(utils.buildSlotID("1", "02")).toEqual("01_02");
    });

    // arrayOfDaySlots
    it("returns an array of day slots", () => {
        const slots = {
            "01_00": "first slot",
            "01_01": "slot",
            "01_02": "another slot",
            "01_03": { something: "else" },
            "01_04": 10,
            "01_05": true
        };

        // defaults to an empty array
        expect(utils.arrayOfDaySlots()).toEqual([]);

        // handles fewer slotsPerDay than slots.length
        const output_1 = ["first slot", "slot", "another slot"];
        expect(utils.arrayOfDaySlots(slots, 1, 3)).toEqual(output_1);

        // handles fewer slotsPerDay than slots.length
        const output_2 = [
            "first slot",
            "slot",
            "another slot",
            { something: "else" },
            10,
            true
        ];
        expect(utils.arrayOfDaySlots(slots, 1, 10)).toEqual(output_2);

        // requires the correct day
        expect(utils.arrayOfDaySlots(slots, 2, 4)).toEqual([]);
    });

    // calculateSlotsPerDay
    it("correctly calculates slots per day", () => {
        // Handles normal results
        expect(utils.calculateSlotsPerDay(60, "18:00", "20:00")).toEqual(2);
        // Correctly rounds (down) potential floating-point issues
        expect(utils.calculateSlotsPerDay(60, "18:30", "20:00")).toEqual(1);
        // Never returns negative values
        expect(utils.calculateSlotsPerDay(60, "20:00", "18:00")).toEqual(2);
    });

    // parseExtras
    it("correctly returns extras when none are explicitly set", () => {
        const expectedOutput = {
            limits: {
                duration: 60,
                end: "17:30",
                start: "09:00",
                tzid: "Etc/UTC",
                slotsPerDay: 8
            },
            slotHeight: { height: 40 }
        };
        expect(utils.parseExtras()).toEqual(expectedOutput);
    });

    // parseExtras
    it("correctly parses extras", () => {
        const input = {
            config: {
                duration: 30,
                start_time: "08:00"
            },
            tzid: "America/Chicago"
        };
        const expectedOutput = {
            limits: {
                duration: 30,
                end: "17:30",
                start: "08:00",
                tzid: "America/Chicago",
                slotsPerDay: 19
            },
            slotHeight: { height: 26 }
        };
        expect(utils.parseExtras(input)).toEqual(expectedOutput);
    });

    // parseAccountOptions
    it("correctly returns default account options", () => {
        const explicit_rule_id = { availability_rule_id: "DEFAULT" };
        const expectedOutput = {
            availability_rule_id: "DEFAULT",
            tzid: "Etc/UTC"
        };
        expect(utils.parseAccountOptions(explicit_rule_id)).toEqual(
            expectedOutput
        );
    });

    // parseAccountOptions
    it("correctly parses account options", () => {
        const input = {
            availability_rule_id: "RULE_ID",
            unused_option: "UNUSED"
        };
        const expectedOutput = {
            availability_rule_id: "RULE_ID",
            tzid: "Etc/UTC"
        };
        expect(utils.parseAccountOptions(input)).toEqual(expectedOutput);
    });

    // buildRuleTemplate
    it("builds a rules template", () => {
        const input = {
            tzid: "TEST_TIMEZONE"
        };
        const expectedOutput = {
            availability_rule: {
                availability_rule_id: "default",
                calendar_ids: [],
                tzid: "TEST_TIMEZONE",
                weekly_periods: [
                    {
                        day: "monday",
                        end_time: "17:00",
                        start_time: "09:00"
                    },
                    {
                        day: "tuesday",
                        end_time: "17:00",
                        start_time: "09:00"
                    },
                    {
                        day: "wednesday",
                        end_time: "17:00",
                        start_time: "09:00"
                    },
                    {
                        day: "thursday",
                        end_time: "17:00",
                        start_time: "09:00"
                    },
                    {
                        day: "friday",
                        end_time: "17:00",
                        start_time: "09:00"
                    }
                ]
            }
        };
        expect(utils.buildRuleTemplate(input)).toEqual(expectedOutput);
    });

    // buildRuleTemplate
    it("builds a rules template when no options are provided", () => {
        const expectedOutput = {
            availability_rule: {
                availability_rule_id: "default",
                calendar_ids: [],
                tzid: "Etc/UTC",
                weekly_periods: [
                    {
                        day: "monday",
                        end_time: "17:00",
                        start_time: "09:00"
                    },
                    {
                        day: "tuesday",
                        end_time: "17:00",
                        start_time: "09:00"
                    },
                    {
                        day: "wednesday",
                        end_time: "17:00",
                        start_time: "09:00"
                    },
                    {
                        day: "thursday",
                        end_time: "17:00",
                        start_time: "09:00"
                    },
                    {
                        day: "friday",
                        end_time: "17:00",
                        start_time: "09:00"
                    }
                ]
            }
        };
        expect(utils.buildRuleTemplate()).toEqual(expectedOutput);
        expect(utils.buildRuleTemplate({})).toEqual(expectedOutput);
    });
});
