import { logConstructor } from "../src/js/helpers/logging";

// The parsers rely on console warning and errors to
// comunicate problems to the users
console.error = jest.fn();
console.info = jest.fn();
console.log = jest.fn();
console.warn = jest.fn();

const messageTemplate = (type, message, slug) =>
    `UI Elements: ${type}\n${message}\nhttps://docs.cronofy.com/developers/ui-elements/${slug}\n`;

beforeEach(() => {
    console.error.mockClear();
    console.info.mockClear();
    console.log.mockClear();
    console.warn.mockClear();
});

describe("Logging", () => {
    it("works in `info` mode", () => {
        const log = logConstructor("info");
        log.error("message");
        log.warn("message");
        log.info("message");
        log.log("message");
        expect(console.error).toHaveBeenCalledTimes(1);
        expect(console.warn).toHaveBeenCalledTimes(1);
        expect(console.info).toHaveBeenCalledTimes(1);
        expect(console.log).toHaveBeenCalledTimes(1);
    });

    it("works in `warn` mode", () => {
        const log = logConstructor("warn");
        log.error("message");
        log.warn("message");
        log.info("message");
        log.log("message");
        expect(console.error).toHaveBeenCalledTimes(1);
        expect(console.warn).toHaveBeenCalledTimes(1);
        expect(console.info).toHaveBeenCalledTimes(0);
        expect(console.log).toHaveBeenCalledTimes(0);
    });

    it("works in `error` mode", () => {
        const log = logConstructor("error");
        log.error("message");
        log.warn("message");
        log.info("message");
        log.log("message");
        expect(console.error).toHaveBeenCalledTimes(1);
        expect(console.warn).toHaveBeenCalledTimes(0);
        expect(console.info).toHaveBeenCalledTimes(0);
        expect(console.log).toHaveBeenCalledTimes(0);
    });

    it("works in `none` mode", () => {
        const log = logConstructor("none");
        log.error("message");
        log.warn("message");
        log.info("message");
        log.log("message");
        expect(console.error).toHaveBeenCalledTimes(0);
        expect(console.warn).toHaveBeenCalledTimes(0);
        expect(console.info).toHaveBeenCalledTimes(0);
        expect(console.log).toHaveBeenCalledTimes(0);
    });

    it("defaults to `warn` mode", () => {
        const log = logConstructor();
        log.error("message");
        log.warn("message");
        log.info("message");
        log.log("message");
        expect(console.error).toHaveBeenCalledTimes(1);
        expect(console.warn).toHaveBeenCalledTimes(1);
        expect(console.info).toHaveBeenCalledTimes(0);
        expect(console.log).toHaveBeenCalledTimes(0);
    });

    it("correctly creates a log", () => {
        const log = logConstructor("info");
        log.info("TEST MESSAGE");
        expect(console.error).toHaveBeenCalledTimes(0);
        expect(console.warn).toHaveBeenCalledTimes(0);
        expect(console.info).toHaveBeenCalledTimes(1);
        expect(console.log).toHaveBeenCalledTimes(0);
        expect(console.info.mock.calls[0][0]).toEqual(
            messageTemplate("General", "TEST MESSAGE", "")
        );
        expect(console.info.mock.calls[0][1]).toBe(undefined);
    });

    it("ignores unwanted properties", () => {
        const log = logConstructor("info");
        log.info("TEST MESSAGE", { unwanted: "THING" });
        expect(console.error).toHaveBeenCalledTimes(0);
        expect(console.warn).toHaveBeenCalledTimes(0);
        expect(console.info).toHaveBeenCalledTimes(1);
        expect(console.log).toHaveBeenCalledTimes(0);
        expect(console.info.mock.calls[0][0]).toEqual(
            messageTemplate("General", "TEST MESSAGE", "")
        );
        expect(console.info.mock.calls[0][1]).toBe(undefined);
    });

    it("adds wanted properties to the log output", () => {
        const log = logConstructor("info");
        log.info("TEST MESSAGE", { errorObject: "THING" });
        expect(console.error).toHaveBeenCalledTimes(0);
        expect(console.warn).toHaveBeenCalledTimes(0);
        expect(console.info).toHaveBeenCalledTimes(1);
        expect(console.log).toHaveBeenCalledTimes(0);
        expect(console.info.mock.calls[0][0]).toEqual(
            messageTemplate("General", "TEST MESSAGE", "")
        );
        expect(console.info.mock.calls[0][1]).toBe("THING");
    });

    it("adds slug to end of docs URL when needed", () => {
        const log = logConstructor("info");
        log.info("TEST MESSAGE", { docsSlug: "TEST" });
        expect(console.error).toHaveBeenCalledTimes(0);
        expect(console.warn).toHaveBeenCalledTimes(0);
        expect(console.info).toHaveBeenCalledTimes(1);
        expect(console.log).toHaveBeenCalledTimes(0);
        expect(console.info.mock.calls[0][0]).toEqual(
            messageTemplate("General", "TEST MESSAGE", "TEST")
        );
        expect(console.info.mock.calls[0][1]).toBe(undefined);
    });

    it("adds docs URL slug, and extra props (and ignores unwanted props)", () => {
        const log = logConstructor("info");
        log.info("TEST MESSAGE", {
            docsSlug: "TEST",
            errorObject: "THING",
            unwanted: "THING"
        });
        expect(console.error).toHaveBeenCalledTimes(0);
        expect(console.warn).toHaveBeenCalledTimes(0);
        expect(console.info).toHaveBeenCalledTimes(1);
        expect(console.log).toHaveBeenCalledTimes(0);
        expect(console.info.mock.calls[0][0]).toEqual(
            messageTemplate("General", "TEST MESSAGE", "TEST")
        );
        expect(console.info.mock.calls[0][1]).toBe("THING");
        expect(console.info.mock.calls[0][2]).toBe(undefined);
    });
});
