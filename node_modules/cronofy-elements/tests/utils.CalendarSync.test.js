import React from "react";
import * as utils from "../src/js/helpers/utils.CalendarSync";

describe("Utilities: CalendarSync", () => {
    // parseAuthOptions
    it("correctly parses authorization options", () => {
        const expectedOutput = {
            option_1: "REDIRECT_URI",
            option_2: "CLIENT_ID",
            option_3: "SCOPE"
        };
        expect(utils.parseAuthOptions(expectedOutput)).toEqual(expectedOutput);
    });

    // buildAuthUrl
    it("builds a valid provider authorization URL", () => {
        const input = {
            authOptions: {
                option_1: "REDIRECT_URI",
                option_2: "CLIENT_ID",
                option_3: "SCOPE"
            },
            provider: "PROVIDER",
            appDomain: "http://local.cronofy.com"
        };
        const result =
            "http://local.cronofy.com/oauth/authorize?response_type=code&provider_name=PROVIDER&option_1=REDIRECT_URI&option_2=CLIENT_ID&option_3=SCOPE";
        expect(utils.buildAuthUrl(input)).toEqual(result);
    });

    it("builds a valid provider authorization URL in singleProfile mode", () => {
        const input = {
            authOptions: {
                option_1: "REDIRECT_URI",
                option_2: "CLIENT_ID",
                option_3: "SCOPE"
            },
            provider: "PROVIDER",
            appDomain: "http://local.cronofy.com",
            singleProfile: true
        };
        const result =
            "http://local.cronofy.com/oauth/authorize?response_type=code&provider_name=PROVIDER&avoid_linking=true&option_1=REDIRECT_URI&option_2=CLIENT_ID&option_3=SCOPE";
        expect(utils.buildAuthUrl(input)).toEqual(result);
    });

    it("builds a valid provider authorization URL without options", () => {
        const input = {
            provider: "PROVIDER",
            appDomain: "http://local.cronofy.com"
        };
        const result =
            "http://local.cronofy.com/oauth/authorize?response_type=code&provider_name=PROVIDER";
        expect(utils.buildAuthUrl(input)).toEqual(result);
    });

    // buildProviderData
    it("correctly parses provider data", () => {
        const buildAuthUrl = jest.fn(() => "AUTH_URL");
        const input = [
            "SLUG",
            "NAME",
            {
                option_1: "REDIRECT_URI",
                option_2: "CLIENT_ID",
                option_3: "SCOPE"
            },
            false,
            "https://app.cronofy.com",
            false,
            buildAuthUrl
        ];
        const expectedOutput = {
            authlink: "AUTH_URL",
            name: "NAME",
            slug: "SLUG"
        };
        expect(utils.buildProviderData(...input)).toEqual(expectedOutput);
        expect(buildAuthUrl).toHaveBeenCalledTimes(1);
    });

    // setupProviderData
    it("correctly sets up provider data", () => {
        const buildProviderData = jest.fn(() => ({
            authlink: "AUTH_URL",
            name: "NAME",
            slug: "SLUG"
        }));
        const input = [
            {
                option_1: "REDIRECT_URI",
                option_2: "CLIENT_ID",
                option_3: "SCOPE"
            },
            "https://app.cronofy.com",
            false,
            false,
            buildProviderData
        ];
        const expectedOutput = [
            {
                authlink: "AUTH_URL",
                name: "NAME",
                slug: "SLUG"
            },
            {
                authlink: "AUTH_URL",
                name: "NAME",
                slug: "SLUG"
            },
            {
                authlink: "AUTH_URL",
                name: "NAME",
                slug: "SLUG"
            },
            {
                authlink: "AUTH_URL",
                name: "NAME",
                slug: "SLUG"
            },
            {
                authlink: "AUTH_URL",
                name: "NAME",
                slug: "SLUG"
            }
        ];
        const result = utils.setupProviderData(...input);
        expect(result).toEqual(expectedOutput);
        expect(result.length).toBe(5);
        expect(buildProviderData).toHaveBeenCalledTimes(5);
        expect(buildProviderData.mock.calls[0][0]).toBe("google");
        expect(buildProviderData.mock.calls[0][1]).toBe("Google");
        expect(buildProviderData.mock.calls[1][0]).toBe("apple");
        expect(buildProviderData.mock.calls[1][1]).toBe("iCloud");
        expect(buildProviderData.mock.calls[2][0]).toBe("office365");
        expect(buildProviderData.mock.calls[2][1]).toBe("Office 365");
        expect(buildProviderData.mock.calls[3][0]).toBe("exchange");
        expect(buildProviderData.mock.calls[3][1]).toBe("Exchange");
        expect(buildProviderData.mock.calls[4][0]).toBe("live_connect");
        expect(buildProviderData.mock.calls[4][1]).toBe("Outlook.com");
    });

    // getProviderIcon
    it("returns the correct icons", () => {
        // Google
        const expectedOutputGoogle = (
            <path d="M19.674 8.682h-9.318v3.863h5.364c-.5 2.455-2.591 3.864-5.364 3.864A5.897 5.897 0 0 1 4.447 10.5a5.897 5.897 0 0 1 5.91-5.91c1.408 0 2.68.5 3.68 1.32L16.948 3C15.174 1.455 12.902.5 10.357.5c-5.546 0-10 4.455-10 10s4.454 10 10 10c5 0 9.545-3.636 9.545-10 0-.59-.091-1.227-.228-1.818z" />
        );
        expect(utils.getProviderIcon("google")).toEqual(expectedOutputGoogle);

        // Apple
        const expectedOutputApple = (
            <path d="M17.1 16.018c-.298.69-.652 1.326-1.061 1.91-.559.796-1.016 1.347-1.369 1.654-.546.502-1.131.76-1.758.774-.45 0-.993-.128-1.625-.388-.633-.258-1.216-.386-1.748-.386-.559 0-1.158.128-1.799.386-.641.26-1.158.395-1.554.409-.6.025-1.2-.24-1.798-.795-.382-.333-.86-.904-1.431-1.713-.614-.863-1.118-1.864-1.513-3.006-.424-1.233-.636-2.427-.636-3.582 0-1.324.286-2.466.86-3.423a5.04 5.04 0 0 1 1.799-1.82 4.84 4.84 0 0 1 2.432-.687c.478 0 1.104.148 1.882.438.776.291 1.274.439 1.492.439.164 0 .717-.173 1.655-.517.887-.32 1.636-.452 2.25-.4 1.662.135 2.91.79 3.741 1.97-1.487.901-2.222 2.163-2.207 3.781.013 1.26.47 2.31 1.37 3.143a4.5 4.5 0 0 0 1.368.897c-.11.319-.226.623-.35.916zM13.29 1.017c0 .988-.361 1.91-1.08 2.764-.87 1.016-1.92 1.602-3.058 1.51a3.076 3.076 0 0 1-.023-.375c0-.948.413-1.963 1.146-2.793.366-.42.832-.77 1.396-1.049.564-.274 1.097-.426 1.598-.452.014.132.02.264.02.395z" />
        );
        expect(utils.getProviderIcon("apple")).toEqual(expectedOutputApple);

        // Office 365
        const expectedOutputOffice365 = (
            <path d="M11.51 2.976c.031.192.039 14.085.01 14.388l-7.085-1.688V5.883L.788 4.458c-.007.005-.014.007-.02.011-.006.004-.013.01-.013.016-.004.036-.009.073-.009.11v11.863c.054.067.124.075.185.098l10.41 3.896c.12.045.229.067.362.028 1.904-.553 3.81-1.099 5.714-1.647l.095-.031V2.122l-1.632-.454c-1.381-.38-2.764-.758-4.144-1.142a.59.59 0 0 0-.386.014C7.937 1.8 4.523 3.058 1.11 4.316a.463.463 0 0 0-.19.113l10.59-1.453z" />
        );
        expect(utils.getProviderIcon("office365")).toEqual(
            expectedOutputOffice365
        );

        // Exchange
        const expectedOutputExchange = (
            <path d="M11.772.701L.234 3.01v15.384l11.538 2.308v-20zm.77 4.616V6.71h.312c.078 0 .144-.006.144.072l1.01.985c.078.079.078.163 0 .24l-.385.385c-.078.079-.162.079-.24 0l-.457-.456h-.385v2.692c.691.616 1.313 1.067 1.082 1.298-.078.153-.544-.078-1.082-.385v2.765h.144c1.232-.923 2.242-2.614 2.549-2.308.384.307-2.074 3.558-2.38 3.558h-.313v1.298h6.683c.538 0 1.01-.472 1.01-1.01V6.326c0-.538-.472-1.01-1.01-1.01H12.54zm-4.688.312v1.683l-2.62.168v1.923l2.38-.096v1.707h-2.38v1.995l2.764.144v1.707l-4.375-.385v-8.39l4.23-.456zm8.149 1.082h2.62c.153 0 .216.063.216.216v2.476c0 .078.006.144-.072.144l-.985 1.01c-.079.078-.163.078-.24 0l-.385-.313c-.079-.078-.079-.162 0-.24l.456-.457v-1.61h-1.37c-1.232.922-2.241 2.614-2.548 2.307-.385-.306 2.001-3.455 2.308-3.533zm-.53 3.557c.61-.045 3.462 2.14 3.462 2.356v1.61h-.096v1.01c0 .154-.063.217-.216.217h-2.476c-.078 0-.144.006-.144-.072l-1.01-.986c-.078-.078-.078-.162 0-.24l.385-.385c.078-.078.162-.078.24 0l.457.457h1.61v-1.37c-.922-1.232-2.614-2.242-2.307-2.548a.141.141 0 0 1 .096-.049z" />
        );
        expect(utils.getProviderIcon("exchange")).toEqual(
            expectedOutputExchange
        );

        // Outlook.com
        const expectedOutputOutlook = (
            <path d="M11.591.54h1.385v4.633c2.4.004 4.797-.007 7.195 0 .472-.024 1.119.113 1.11.708.087 2.93.002 5.867.041 8.8.01.519-.007 1.336-.713 1.343-2.541.088-5.09.007-7.633.035v4.4H11.54c-3.53-.64-7.069-1.231-10.603-1.852C.934 13.203.934 7.799.934 2.397 4.487 1.776 8.041 1.173 11.591.54zm1.385 5.327v2.56c.906.845 1.8 1.705 2.72 2.536 1.528-1.434 3.053-2.87 4.586-4.299.255-.19.347-.488.391-.792-2.566-.011-5.13-.002-7.697-.005zm3.447 5.302c-.257.213-.512.54-.89.47-.917-.697-1.69-1.568-2.554-2.332-.005 2.018-.003 4.037-.003 6.057h7.644c-.002-2.715.005-5.431-.002-8.146-1.4 1.315-2.803 2.629-4.195 3.951zM5.9 6.715c-2.223.795-2.626 3.778-1.797 5.717.63 1.681 2.948 2.355 4.331 1.172 1.501-1.314 1.608-3.69.853-5.427-.554-1.263-2.08-1.955-3.387-1.462zm.225 1.392c.616-.294 1.387.005 1.677.614.463.917.46 2.036.157 3.004-.215.688-.968 1.256-1.697.985-.91-.288-1.186-1.367-1.196-2.212-.011-.876.19-1.967 1.059-2.39z" />
        );
        expect(utils.getProviderIcon("live_connect")).toEqual(
            expectedOutputOutlook
        );
    });

    it("returns the correct icons with fills", () => {
        // Google
        const expectedOutputGoogle = (
            <React.Fragment>
                <defs>
                    <path d="M19.674 8.682h-9.318v3.863h5.364c-.5 2.455-2.591 3.864-5.364 3.864A5.897 5.897 0 0 1 4.447 10.5a5.897 5.897 0 0 1 5.91-5.91c1.408 0 2.68.5 3.68 1.32L16.948 3C15.174 1.455 12.902.5 10.357.5c-5.546 0-10 4.455-10 10s4.454 10 10 10c5 0 9.545-3.636 9.545-10 0-.59-.091-1.227-.228-1.818z" />
                    <path
                        d="M19.318 8.182H10v3.863h5.364c-.5 2.455-2.591 3.864-5.364 3.864A5.897 5.897 0 0 1 4.09 10 5.897 5.897 0 0 1 10 4.09c1.41 0 2.682.5 3.682 1.32L16.59 2.5C14.818.955 12.545 0 10 0 4.455 0 0 4.455 0 10s4.455 10 10 10c5 0 9.545-3.636 9.545-10 0-.59-.09-1.227-.227-1.818z"
                        id="google_a"
                    />
                    <path
                        d="M19.318 8.182H10v3.863h5.364c-.5 2.455-2.591 3.864-5.364 3.864A5.897 5.897 0 0 1 4.09 10 5.897 5.897 0 0 1 10 4.09c1.41 0 2.682.5 3.682 1.32L16.59 2.5C14.818.955 12.545 0 10 0 4.455 0 0 4.455 0 10s4.455 10 10 10c5 0 9.545-3.636 9.545-10 0-.59-.09-1.227-.227-1.818z"
                        id="google_c"
                    />
                    <path
                        d="M19.318 8.182H10v3.863h5.364c-.5 2.455-2.591 3.864-5.364 3.864A5.897 5.897 0 0 1 4.09 10 5.897 5.897 0 0 1 10 4.09c1.41 0 2.682.5 3.682 1.32L16.59 2.5C14.818.955 12.545 0 10 0 4.455 0 0 4.455 0 10s4.455 10 10 10c5 0 9.545-3.636 9.545-10 0-.59-.09-1.227-.227-1.818z"
                        id="google_e"
                    />
                    <path
                        d="M19.318 8.182H10v3.863h5.364c-.5 2.455-2.591 3.864-5.364 3.864A5.897 5.897 0 0 1 4.09 10 5.897 5.897 0 0 1 10 4.09c1.41 0 2.682.5 3.682 1.32L16.59 2.5C14.818.955 12.545 0 10 0 4.455 0 0 4.455 0 10s4.455 10 10 10c5 0 9.545-3.636 9.545-10 0-.59-.09-1.227-.227-1.818z"
                        id="google_g"
                    />
                </defs>
                <g fill="none" fillRule="evenodd">
                    <g transform="translate(0 .498)">
                        <mask fill="#fff" id="google_b">
                            <use xlinkHref="#google_a" />
                        </mask>
                        <path
                            d="M-.91 15.91V4.09L6.819 10z"
                            fill="#FBBC05"
                            mask="url(#google_b)"
                        />
                    </g>
                    <g transform="translate(0 .498)">
                        <mask fill="#fff" id="google_d">
                            <use xlinkHref="#google_c" />
                        </mask>
                        <path
                            d="M-.91 4.09L6.819 10 10 7.227l10.91-1.772V-.91H-.91z"
                            fill="#EA4335"
                            fillRule="nonzero"
                            mask="url(#google_d)"
                        />
                    </g>
                    <g transform="translate(0 .498)">
                        <mask fill="#fff" id="google_f">
                            <use xlinkHref="#google_e" />
                        </mask>
                        <path
                            d="M-.91 15.91L12.728 5.454l3.591.454L20.91-.909v21.818H-.909z"
                            fill="#34A853"
                            fillRule="nonzero"
                            mask="url(#google_f)"
                        />
                    </g>
                    <g transform="translate(0 .498)">
                        <mask fill="#fff" id="google_h">
                            <use xlinkHref="#google_g" />
                        </mask>
                        <path
                            d="M20.91 20.91L6.817 10 5 8.636l15.91-4.545z"
                            fill="#4285F4"
                            fillRule="nonzero"
                            mask="url(#google_h)"
                        />
                    </g>
                </g>
            </React.Fragment>
        );
        expect(utils.getProviderIcon("google", true)).toEqual(
            expectedOutputGoogle
        );

        // Apple
        const expectedOutputApple = (
            <path d="M17.1 16.018c-.298.69-.652 1.326-1.061 1.91-.559.796-1.016 1.347-1.369 1.654-.546.502-1.131.76-1.758.774-.45 0-.993-.128-1.625-.388-.633-.258-1.216-.386-1.748-.386-.559 0-1.158.128-1.799.386-.641.26-1.158.395-1.554.409-.6.025-1.2-.24-1.798-.795-.382-.333-.86-.904-1.431-1.713-.614-.863-1.118-1.864-1.513-3.006-.424-1.233-.636-2.427-.636-3.582 0-1.324.286-2.466.86-3.423a5.04 5.04 0 0 1 1.799-1.82 4.84 4.84 0 0 1 2.432-.687c.478 0 1.104.148 1.882.438.776.291 1.274.439 1.492.439.164 0 .717-.173 1.655-.517.887-.32 1.636-.452 2.25-.4 1.662.135 2.91.79 3.741 1.97-1.487.901-2.222 2.163-2.207 3.781.013 1.26.47 2.31 1.37 3.143a4.5 4.5 0 0 0 1.368.897c-.11.319-.226.623-.35.916zM13.29 1.017c0 .988-.361 1.91-1.08 2.764-.87 1.016-1.92 1.602-3.058 1.51a3.076 3.076 0 0 1-.023-.375c0-.948.413-1.963 1.146-2.793.366-.42.832-.77 1.396-1.049.564-.274 1.097-.426 1.598-.452.014.132.02.264.02.395z" />
        );
        expect(utils.getProviderIcon("apple", true)).toEqual(
            expectedOutputApple
        );

        // Office 365
        const expectedOutputOffice365 = (
            <path
                d="M11.51 2.976c.031.192.039 14.085.01 14.388l-7.085-1.688V5.883L.788 4.458c-.007.005-.014.007-.02.011-.006.004-.013.01-.013.016-.004.036-.009.073-.009.11v11.863c.054.067.124.075.185.098l10.41 3.896c.12.045.229.067.362.028 1.904-.553 3.81-1.099 5.714-1.647l.095-.031V2.122l-1.632-.454c-1.381-.38-2.764-.758-4.144-1.142a.59.59 0 0 0-.386.014C7.937 1.8 4.523 3.058 1.11 4.316a.463.463 0 0 0-.19.113l10.59-1.453z"
                fill="#DC3E15"
            />
        );
        expect(utils.getProviderIcon("office365", true)).toEqual(
            expectedOutputOffice365
        );

        // Exchange
        const expectedOutputExchange = (
            <path
                d="M11.772.701L.234 3.01v15.384l11.538 2.308v-20zm.77 4.616V6.71h.312c.078 0 .144-.006.144.072l1.01.985c.078.079.078.163 0 .24l-.385.385c-.078.079-.162.079-.24 0l-.457-.456h-.385v2.692c.691.616 1.313 1.067 1.082 1.298-.078.153-.544-.078-1.082-.385v2.765h.144c1.232-.923 2.242-2.614 2.549-2.308.384.307-2.074 3.558-2.38 3.558h-.313v1.298h6.683c.538 0 1.01-.472 1.01-1.01V6.326c0-.538-.472-1.01-1.01-1.01H12.54zm-4.688.312v1.683l-2.62.168v1.923l2.38-.096v1.707h-2.38v1.995l2.764.144v1.707l-4.375-.385v-8.39l4.23-.456zm8.149 1.082h2.62c.153 0 .216.063.216.216v2.476c0 .078.006.144-.072.144l-.985 1.01c-.079.078-.163.078-.24 0l-.385-.313c-.079-.078-.079-.162 0-.24l.456-.457v-1.61h-1.37c-1.232.922-2.241 2.614-2.548 2.307-.385-.306 2.001-3.455 2.308-3.533zm-.53 3.557c.61-.045 3.462 2.14 3.462 2.356v1.61h-.096v1.01c0 .154-.063.217-.216.217h-2.476c-.078 0-.144.006-.144-.072l-1.01-.986c-.078-.078-.078-.162 0-.24l.385-.385c.078-.078.162-.078.24 0l.457.457h1.61v-1.37c-.922-1.232-2.614-2.242-2.307-2.548a.141.141 0 0 1 .096-.049z"
                fill="#0071C5"
            />
        );
        expect(utils.getProviderIcon("exchange", true)).toEqual(
            expectedOutputExchange
        );

        // Outlook.com
        const expectedOutputOutlook = (
            <path
                d="M11.591.54h1.385v4.633c2.4.004 4.797-.007 7.195 0 .472-.024 1.119.113 1.11.708.087 2.93.002 5.867.041 8.8.01.519-.007 1.336-.713 1.343-2.541.088-5.09.007-7.633.035v4.4H11.54c-3.53-.64-7.069-1.231-10.603-1.852C.934 13.203.934 7.799.934 2.397 4.487 1.776 8.041 1.173 11.591.54zm1.385 5.327v2.56c.906.845 1.8 1.705 2.72 2.536 1.528-1.434 3.053-2.87 4.586-4.299.255-.19.347-.488.391-.792-2.566-.011-5.13-.002-7.697-.005zm3.447 5.302c-.257.213-.512.54-.89.47-.917-.697-1.69-1.568-2.554-2.332-.005 2.018-.003 4.037-.003 6.057h7.644c-.002-2.715.005-5.431-.002-8.146-1.4 1.315-2.803 2.629-4.195 3.951zM5.9 6.715c-2.223.795-2.626 3.778-1.797 5.717.63 1.681 2.948 2.355 4.331 1.172 1.501-1.314 1.608-3.69.853-5.427-.554-1.263-2.08-1.955-3.387-1.462zm.225 1.392c.616-.294 1.387.005 1.677.614.463.917.46 2.036.157 3.004-.215.688-.968 1.256-1.697.985-.91-.288-1.186-1.367-1.196-2.212-.011-.876.19-1.967 1.059-2.39z"
                fill="#0071C5"
            />
        );
        expect(utils.getProviderIcon("live_connect", true)).toEqual(
            expectedOutputOutlook
        );
    });
});
