import * as slotsHelpers from "../src/js/helpers/slots";
import moment from "moment-timezone";

describe("Slots helpers", () => {
    // getDaysFromAvailablePeriods
    it("returns array of days from available_periods object", () => {
        const mockData = [
            {
                start: "2018-11-08T15:40:00Z",
                end: "2018-11-08T17:00:00Z"
            },
            {
                start: "2018-11-09T09:00:00Z",
                end: "2018-11-09T10:00:00Z"
            },
            {
                start: "2018-11-09T10:30:00Z",
                end: "2018-11-09T11:30:00Z"
            },
            {
                start: "2018-11-10T09:00:00Z",
                end: "2018-11-10T10:00:00Z"
            },
            {
                start: "2018-11-10T10:30:00Z",
                end: "2018-11-10T11:30:00Z"
            },
            {
                start: "2018-11-10T12:00:00Z",
                end: "2018-11-10T14:30:00Z"
            }
        ];
        const expectedResult = [
            { label: "Thursday 8th November", value: "2018-11-08TT09:00:00Z" },
            { label: "Friday 9th November", value: "2018-11-09TT09:00:00Z" },
            { label: "Saturday 10th November", value: "2018-11-10TT09:00:00Z" }
        ];

        const days = slotsHelpers.getDaysFromAvailablePeriods(
            mockData,
            "en-US"
        );

        expect(days).toEqual(expectedResult);
    });

    // slotsFromPeriod
    it("returns slots in a given period", () => {
        const mockData = {
            start: "2018-11-08T15:40:00Z",
            end: "2018-11-08T17:00:00Z"
        };
        const expectedResult = [
            {
                end: "2018-11-08T15:55:00Z",
                participants: [],
                start: "2018-11-08T15:40:00Z"
            },
            {
                end: "2018-11-08T16:10:00Z",
                participants: [],
                start: "2018-11-08T15:55:00Z"
            },
            {
                end: "2018-11-08T16:25:00Z",
                participants: [],
                start: "2018-11-08T16:10:00Z"
            },
            {
                end: "2018-11-08T16:40:00Z",
                participants: [],
                start: "2018-11-08T16:25:00Z"
            },
            {
                end: "2018-11-08T16:55:00Z",
                participants: [],
                start: "2018-11-08T16:40:00Z"
            }
        ];

        const slots = slotsHelpers.slotsFromPeriod(mockData, 15);

        expect(slots).toEqual(expectedResult);
    });

    // roundToNextHour
    it("rounds up to next hour", () => {
        // rounds up
        expect(
            slotsHelpers
                .roundToNextHour(moment("2018-11-08T15:40:00"))
                .format(`YYYY-MM-DDTHH:mm[:00]`)
        ).toEqual("2018-11-08T16:00:00");
        // ...but only if it needs to
        expect(
            slotsHelpers
                .roundToNextHour(moment("2018-11-08T15:00:00"))
                .format(`YYYY-MM-DDTHH:mm[:00]`)
        ).toEqual("2018-11-08T15:00:00");
    });

    // roundToNextHalfHour
    it("rounds up to next half-hour", () => {
        // rounds up
        expect(
            slotsHelpers
                .roundToNextHalfHour(moment("2018-11-08T15:40:00"))
                .format(`YYYY-MM-DDTHH:mm[:00]`)
        ).toEqual("2018-11-08T16:00:00");
        expect(
            slotsHelpers
                .roundToNextHalfHour(moment("2018-11-08T15:12:00"))
                .format(`YYYY-MM-DDTHH:mm[:00]`)
        ).toEqual("2018-11-08T15:30:00");
        expect(
            slotsHelpers
                .roundToNextHalfHour(moment("2018-11-08T15:34:00"))
                .format(`YYYY-MM-DDTHH:mm[:00]`)
        ).toEqual("2018-11-08T16:00:00");
        // ...but only if it needs to
        expect(
            slotsHelpers
                .roundToNextHalfHour(moment("2018-11-08T15:00:00"))
                .format(`YYYY-MM-DDTHH:mm[:00]`)
        ).toEqual("2018-11-08T15:00:00");
        expect(
            slotsHelpers
                .roundToNextHalfHour(moment("2018-11-08T15:30:00"))
                .format(`YYYY-MM-DDTHH:mm[:00]`)
        ).toEqual("2018-11-08T15:30:00");
    });

    // roundToNextQuarterHour
    it("rounds up to next quarter-hour", () => {
        // rounds up
        expect(
            slotsHelpers
                .roundToNextQuarterHour(moment("2018-11-08T15:40:00"))
                .format(`YYYY-MM-DDTHH:mm[:00]`)
        ).toEqual("2018-11-08T15:45:00");
        expect(
            slotsHelpers
                .roundToNextQuarterHour(moment("2018-11-08T15:12:00"))
                .format(`YYYY-MM-DDTHH:mm[:00]`)
        ).toEqual("2018-11-08T15:15:00");
        expect(
            slotsHelpers
                .roundToNextQuarterHour(moment("2018-11-08T15:34:00"))
                .format(`YYYY-MM-DDTHH:mm[:00]`)
        ).toEqual("2018-11-08T15:45:00");
        // ...but only if it needs to
        expect(
            slotsHelpers
                .roundToNextQuarterHour(moment("2018-11-08T15:00:00"))
                .format(`YYYY-MM-DDTHH:mm[:00]`)
        ).toEqual("2018-11-08T15:00:00");
        expect(
            slotsHelpers
                .roundToNextQuarterHour(moment("2018-11-08T15:30:00"))
                .format(`YYYY-MM-DDTHH:mm[:00]`)
        ).toEqual("2018-11-08T15:30:00");
        expect(
            slotsHelpers
                .roundToNextQuarterHour(moment("2018-11-08T15:45:00"))
                .format(`YYYY-MM-DDTHH:mm[:00]`)
        ).toEqual("2018-11-08T15:45:00");
    });

    // roundPeriod
    it("rounds to the correct duration", () => {
        const mockData = {
            start: "2018-11-08T15:10:00Z",
            end: "2018-11-08T17:00:00Z"
        };

        const hour = jest.fn();
        hour.mockReturnValue(moment("2018-11-08T16:00:00Z"));
        const half = jest.fn();
        half.mockReturnValue(moment("2018-11-08T15:30:00Z"));
        const quarter = jest.fn();
        quarter.mockReturnValue(moment("2018-11-08T15:15:00Z"));

        slotsHelpers.roundPeriod(mockData, 15, hour, half, quarter);
        expect(hour).toHaveBeenCalledTimes(0);
        expect(half).toHaveBeenCalledTimes(0);
        expect(quarter).toHaveBeenCalledTimes(1);

        slotsHelpers.roundPeriod(mockData, 30, hour, half, quarter);
        expect(hour).toHaveBeenCalledTimes(0);
        expect(half).toHaveBeenCalledTimes(1);
        expect(quarter).toHaveBeenCalledTimes(1);

        slotsHelpers.roundPeriod(mockData, 60, hour, half, quarter);
        expect(hour).toHaveBeenCalledTimes(1);
        expect(half).toHaveBeenCalledTimes(1);
        expect(quarter).toHaveBeenCalledTimes(1);
    });

    // parsePeriodsIntoSlots
    it("parses periods into slots", () => {
        const periods = [
            {
                start: "2018-11-08T15:40:00Z",
                end: "2018-11-08T17:00:00Z"
            },
            {
                start: "2018-11-09T09:00:00Z",
                end: "2018-11-09T10:00:00Z"
            }
        ];
        const slots = slotsHelpers.parsePeriodsIntoSlots(periods, 30);
        expect(slots.length).toEqual(4);
        expect(slots[0].start).toEqual("2018-11-08T16:00:00Z");
        expect(slots[0].end).toEqual("2018-11-08T16:30:00Z");
        expect(slots[1].start).toEqual("2018-11-08T16:30:00Z");
        expect(slots[1].end).toEqual("2018-11-08T17:00:00Z");
    });

    // arangeSlotsByDay
    it("aranges slots by day", () => {
        const slots = [
            {
                end: "2018-11-08T16:30:00Z",
                participants: [],
                start: "2018-11-08T16:00:00Z"
            },
            {
                end: "2018-11-08T17:00:00Z",
                participants: [],
                start: "2018-11-08T16:30:00Z"
            },
            {
                end: "2018-11-09T09:30:00Z",
                participants: [],
                start: "2018-11-09T09:00:00Z"
            },
            {
                end: "2018-11-09T10:00:00Z",
                participants: [],
                start: "2018-11-09T09:30:00Z"
            }
        ];

        const days = [
            { label: "Thursday 8th November", value: "2018-11-08TT09:00:00Z" },
            { label: "Friday 9th November", value: "2018-11-09TT09:00:00Z" },
            { label: "Saturday 10th November", value: "2018-11-10TT09:00:00Z" }
        ];

        const expectedResult = {
            "2018-11-08TT09:00:00Z": [
                {
                    label: "4:00PM - 4:30PM",
                    value: {
                        end: "2018-11-08T16:30:00Z",
                        participants: [],
                        start: "2018-11-08T16:00:00Z"
                    }
                },
                {
                    label: "4:30PM - 5:00PM",
                    value: {
                        end: "2018-11-08T17:00:00Z",
                        participants: [],
                        start: "2018-11-08T16:30:00Z"
                    }
                }
            ],
            "2018-11-09TT09:00:00Z": [
                {
                    label: "9:00AM - 9:30AM",
                    value: {
                        end: "2018-11-09T09:30:00Z",
                        participants: [],
                        start: "2018-11-09T09:00:00Z"
                    }
                },
                {
                    label: "9:30AM - 10:00AM",
                    value: {
                        end: "2018-11-09T10:00:00Z",
                        participants: [],
                        start: "2018-11-09T09:30:00Z"
                    }
                }
            ],
            "2018-11-10TT09:00:00Z": []
        };

        const result = slotsHelpers.arangeSlotsByDay(days, slots, "en-US");
        expect(result).toEqual(expectedResult);
    });
});
