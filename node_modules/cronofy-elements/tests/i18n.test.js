import * as i18n from "../src/js/helpers/i18n";

describe("i18n", () => {
    // getNavigatorLanguage
    it("extracts the locale from the navigator", () => {
        // gets the first locale if array is set
        expect(i18n.getNavigatorLanguage({ languages: ["en"] })).toEqual("en");
        // ...otherwise checks userLanguage
        expect(i18n.getNavigatorLanguage({ userLanguage: "en" })).toEqual("en");
        // ...otherwise checks language
        expect(i18n.getNavigatorLanguage({ language: "en" })).toEqual("en");
        // ...otherwise checks browserLanguage
        expect(i18n.getNavigatorLanguage({ browserLanguage: "en" })).toEqual(
            "en"
        );
        // falls back to "en"
        expect(i18n.getNavigatorLanguage(false)).toEqual("en");
    });

    // i18n
    it("picks the correct phrase by slug and locale", () => {
        const testPhrases = {
            en: {
                core: { test: "Testing" },
                alternate_context: {
                    test: "Alternate test",
                    extra: "An extra thing"
                }
            },
            de: {
                core: { test: "Testen" },
                alternate_context: {
                    extra: "Eine extra Sache"
                }
            }
        };

        const english = i18n.i18n("core", "test", "en", testPhrases);
        expect(english).toEqual("Testing");

        const german = i18n.i18n("core", "test", "de", testPhrases);
        expect(german).toEqual("Testen");

        const alternateContext = i18n.i18n(
            "alternate_context",
            "extra",
            "en",
            testPhrases
        );
        expect(alternateContext).toEqual("An extra thing");

        const alternateContextDe = i18n.i18n(
            "alternate_context",
            "extra",
            "de",
            testPhrases
        );
        expect(alternateContextDe).toEqual("Eine extra Sache");
    });

    it("handles missing locales without breaking", () => {
        const testPhrases = {
            en: {
                core: { test: "Testing" },
                alternate_context: {
                    test: "Alternate test",
                    extra: "An extra thing"
                }
            },
            de: {
                core: { test: "Testen" },
                alternate_context: {
                    extra: "Eine extra Sache"
                }
            }
        };

        const context = "core";

        const noLocale = i18n.i18n(context, "test", "gibberish", testPhrases);
        expect(noLocale).toEqual("Testing");
    });

    it("handles missing context without breaking", () => {
        const testPhrases = {
            en: {
                core: { test: "Testing" },
                alternate_context: {
                    test: "Alternate test",
                    extra: "An extra thing"
                }
            },
            de: {
                core: { test: "Testen" },
                alternate_context: {
                    extra: "Eine extra Sache"
                }
            }
        };

        const alternateContext = i18n.i18n(
            "alternate_context",
            "test",
            "en",
            testPhrases
        );
        expect(alternateContext).toEqual("Alternate test");

        const alternateContextDe = i18n.i18n(
            "missing_context",
            "test",
            "de",
            testPhrases
        );
        expect(alternateContextDe).toEqual("Testen");
    });

    it("handles missing phrases without breaking", () => {
        // If there's no translation found, i18n() will output a `warn`.
        // We're mocking that here for 2 reasons:
        // 1. Keep the test's terminal output clean.
        // 2. Test if the warn has been called (without having to test a native browser function).
        console.warn = jest.fn();

        const testPhrases = {
            en: {
                core: { test: "Testing" },
                alternate_context: {
                    test: "Alternate test",
                    extra: "An extra thing"
                }
            },
            de: {
                core: { test: "Testen" },
                alternate_context: {
                    extra: "Eine extra Sache"
                }
            }
        };
        const alternateContextDe2 = i18n.i18n(
            "alternate_context",
            "this_slug_does_not_exist",
            "de",
            testPhrases
        );
        expect(alternateContextDe2).toEqual("This slug does not exist");
        expect(console.warn).toHaveBeenCalledTimes(1);

        const alternateContextFr = i18n.i18n(
            "alternate_context",
            "this_slug_does_not_exist",
            "fr",
            testPhrases
        );
        expect(alternateContextFr).toEqual("This slug does not exist");
        expect(console.warn).toHaveBeenCalledTimes(2);

        const incorrectSlug = i18n.i18n("core", "this_slug_does_not_exist");
        expect(incorrectSlug).toEqual("This slug does not exist");
        expect(console.warn).toHaveBeenCalledTimes(3);
    });
});
