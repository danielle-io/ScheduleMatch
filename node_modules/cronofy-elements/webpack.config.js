const webpack = require("webpack");
const path = require("path");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const OptimizeCSSAssetsPlugin = require("optimize-css-assets-webpack-plugin");
const UglifyJsPlugin = require("uglifyjs-webpack-plugin");
const SpriteLoaderPlugin = require("svg-sprite-loader/plugin");
const GitRevisionPlugin = require("git-revision-webpack-plugin");
const gitRevisionPlugin = new GitRevisionPlugin();
const BundleAnalyzerPlugin = require("webpack-bundle-analyzer")
    .BundleAnalyzerPlugin;
const MomentTimezoneDataPlugin = require("moment-timezone-data-webpack-plugin");

const deprecationNotice = `CronofyComponents has been deprecated. Please use CronofyElements instead. Full details can be found on the Cronofy Elements documention page: https://docs.cronofy.com/developers/ui-elements/`;

module.exports = (env, argv) => ({
    entry: "./src/js/main.js",
    output: {
        path: path.resolve(__dirname, "build"),
        filename:
            argv.mode === "development"
                ? `CronofyElements.dev.js`
                : `CronofyElements.${gitRevisionPlugin.version()}.js`,
        library: "CronofyElements",
        libraryTarget: "umd",
        umdNamedDefine: true
    },
    optimization: {
        minimizer: [
            new UglifyJsPlugin({
                cache: true,
                parallel: true,
                sourceMap: argv.mode === "development" // set to true if you want JS source maps
            }),
            new OptimizeCSSAssetsPlugin({})
        ]
    },
    module: {
        rules: [
            {
                test: /\.js$/,
                loader: "babel-loader",
                exclude: /@babel(?:\/|\\{1,2})runtime|core-js/,
                options: {
                    presets: [
                        "@babel/preset-react",
                        [
                            "@emotion/babel-preset-css-prop",
                            {
                                sourceMap: argv.mode === "development"
                            }
                        ],
                        [
                            "@babel/preset-env",
                            {
                                useBuiltIns: "entry",
                                corejs: "3.0.0",
                                targets: { ie: "11" }
                            }
                        ]
                    ],
                    plugins: [
                        "@babel/plugin-proposal-class-properties",
                        "@babel/plugin-proposal-object-rest-spread"
                    ]
                }
            },
            {
                test: /\.[s]?css$/,
                use: [
                    // fallback to style-loader in development
                    process.env.NODE_ENV !== "production"
                        ? "style-loader"
                        : MiniCssExtractPlugin.loader,
                    // MiniCssExtractPlugin.loader,
                    {
                        loader: "css-loader", // translates CSS into CommonJS
                        options: {
                            sourceMap: true
                        }
                    },
                    {
                        loader: "postcss-loader",
                        options: {
                            sourceMap: true
                        }
                    },
                    // 'resolve-url-loader',
                    {
                        loader: "sass-loader", // compiles Sass to CSS
                        options: {
                            sourceMap: true
                        }
                    }
                ]
            },
            {
                test: /\.(png|jpg|gif)$/,
                use: ["file-loader"]
            },
            {
                test: /\.svg$/,
                use: [
                    {
                        loader: "svg-sprite-loader"
                        // options: {
                        //     extract: true,
                        //     spriteFilename: "icons/iconsprite.svg.php",
                        //     path: path.resolve(__dirname, "assets")
                        // }
                    },
                    "svgo-loader"
                ]
            },
            {
                test: /\.(woff|woff2|eot|ttf|otf)$/,
                use: [
                    {
                        loader: "file-loader",
                        options: {
                            // path: path.resolve(__dirname, 'assets/css'),
                            name: "fonts/[name].[ext]"
                        }
                    }
                ]
            }
        ]
    },
    plugins: [
        new MiniCssExtractPlugin({
            // Options similar to the same options in webpackOptions.output
            // both options are optional
            path: path.resolve(__dirname, "build/css"),
            filename: "app.css",
            chunkFilename: "[id].css"
        }),
        new SpriteLoaderPlugin(),
        new webpack.BannerPlugin({
            banner: `const CronofyComponents = {
                Agenda:function(){console.error("${deprecationNotice}");},
                SlotPicker:function(){console.error("${deprecationNotice}");},
                AvailabilityViewer:function(){console.error("${deprecationNotice}");}
            };`,
            raw: true
        }),
        new BundleAnalyzerPlugin({
            analyzerMode: argv.mode === "development" ? "server" : "disabled", // server | static | disabled
            analyzerPort: 8181
        }),
        new MomentTimezoneDataPlugin({
            startYear: new Date().getFullYear() - 2,
            endYear: new Date().getFullYear() + 5
        })
    ]
});
