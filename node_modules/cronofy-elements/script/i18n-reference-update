#!/usr/bin/env ruby

require "bundler/inline"

ENV["BUNDLE_PATH"] = File.expand_path("../../vendor/bundle", __FILE__)

gemfile(true) do
  source 'https://rubygems.org'

  gem "faraday"
  gem "hatchet"
  gem "nokogiri"
  gem "rubyzip", require: "zip"
end

Hatchet.configure do |config|
  config.level :debug if ARGV.include?("--debug")

  config.appenders << Hatchet::LoggerAppender.new do |appender|
    appender.logger = Logger.new(STDOUT)
  end
end

root_dir = File.expand_path("../..", __FILE__)
tmp_dir = File.join(root_dir, "tmp")

class CldrData
  include Hatchet

  class CldrLocale
    include Hatchet

    def initialize(cldr, locale)
      @cldr = cldr
      @locale = locale
    end

    def time_zones
      root_locale, specific_locale = @locale.split("-", 2)

      time_zones = {}
      time_zone_label = nil

      files = []
      files << "common/main/#{root_locale}.xml"

      if specific_locale
        # Add second to override generic
        files << "common/main/#{root_locale}_#{specific_locale.upcase}.xml"
      end

      files.each do |file|
        if contents = @cldr.get_file(file)
          log.debug { "File named #{file} found" }

          doc = Nokogiri::XML(contents)
          doc.remove_namespaces!

          doc.css("dates field[type=zone] displayName").each do |key|
            time_zone_label = key.text
          end

          doc.css("localeDisplayNames key[type=timezone]").each do |key|
            time_zone_label = key.text
          end

          doc.css("timeZoneNames zone").each do |zone|
            type = zone["type"]
            city = zone.at_css("exemplarCity")

            if city
              city_name = city.text
              leaf = type.split("/").last
              derived = leaf.gsub("_", " ")

              time_zones[type] = city_name unless city_name == derived
            end
          end
        else
          log.debug { "No file named #{file} found" }
        end
      end

      [time_zones, time_zone_label]
    end
  end

  attr_reader :version

  def initialize(dir)
    @dir = dir
  end

  def for_locale(locale)
    CldrLocale.new(self, locale)
  end

  def get_file(path)
    Zip::File.open(latest_version) do |zip_file|
      entry = zip_file.find_entry(path)
      entry.get_input_stream.read if entry
    end
  end

  def load!
    latest_version
    nil
  end

  private

  def latest_version
    @latest_version ||= begin
      uri, @version = get_latest_details

      filename = "cldr-common-#{version}.zip"
      data_uri = URI.join(uri, filename)

      download_to_file(data_uri, filename)
    end
  end

  def download_to_file(uri, filename)
    downloads_dir = File.join(@dir, "cldr", "downloads")
    FileUtils.mkdir_p(downloads_dir)

    file = File.join(downloads_dir, filename)

    if File.exist?(file)
      log.debug { "#{filename} already downloaded" }
      return file
    end

    log.info { "Downloading #{uri}" }

    Net::HTTP.start(uri.host, uri.port, use_ssl: true) do |http|
      request = Net::HTTP::Get.new(uri)

      http.request(request) do |response|
        File.open(file, 'w') do |io|
          response.read_body do |chunk|
            io.write(chunk)
          end
        end
      end
    end

    file
  end

  def get_latest_details
    log.info { "Checking latest version" }
    latest_resp = Faraday.get("https://unicode.org/Public/cldr/latest/")
    raise "Not redirected" unless latest_resp.status == 302

    latest_uri = URI(latest_resp.headers["location"])
    raise "Not HTTPS" unless latest_uri.scheme == "https"

    latest_path = Pathname.new(latest_uri.path)
    latest_version = latest_path.basename.to_s

    unless latest_version.include?(".")
      latest_version += ".0"
    end

    log.info { "Latest version #{latest_version}" }
    [latest_uri, latest_version]
  end
end

cldr = CldrData.new(tmp_dir)
cldr.load!

module WriterHelpers
  def write_generated_locale_file(locale, name, hash)
    file = File.expand_path("../../src/js/translations/#{locale}/#{name}.json", __FILE__)

    log.debug { "Writing #{file}" }

    contents = JSON.pretty_generate(hash)

    IO.write(file, contents)
  end
end

class TimeZoneWriter
  include Hatchet
  include WriterHelpers

  attr_reader :cldr
  attr_reader :locale

  def initialize(locale, cldr)
    @locale = locale
    @cldr = cldr
  end

  def call
    locale_cldr = cldr.for_locale(locale)

    time_zones, time_zone_label = locale_cldr.time_zones

    root = {
      'time_zone' => {
        'label' => time_zone_label,
      },
      'time_zones' => time_zones.sort.to_h,
    }

    write_generated_locale_file(locale, "time_zones", root)
  end
end

class LocaleWriter
  include Hatchet

  attr_reader :cldr
  attr_reader :locale

  def initialize(locale, cldr)
    @locale = locale
    @cldr = cldr
  end

  def call
    log.ndc.scope("locale=#{locale}") do
      log.info { "Writing locale"}
      TimeZoneWriter.new(locale, cldr).call
    end
  end
end

locales_dir = File.expand_path("../../src/js/translations", __FILE__)

locales = Dir.entries(locales_dir).select do |dir|
  dir =~ /\A[a-z]{1,2}(-[a-z]{1,2})?\z/
end

locales.each do |locale|
  LocaleWriter.new(locale, cldr).call
end
