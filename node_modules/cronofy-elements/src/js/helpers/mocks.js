import moment from "moment-timezone";

const today = moment(new Date());

const staticEvents = [
    {
        calendar_id: "A_CALENDAR_ID_0",
        event_uid: "12345",
        summary: "An all day get-together",
        description: "",
        start: today.format(`YYYY-MM-DD`),
        end: today.add(1, "days").format(`YYYY-MM-DD`),
        location: {
            description: "London office"
        },
        participation_status: "accepted",
        transparency: "transparent",
        status: "confirmed",
        recurring: false
    },
    {
        calendar_id: "A_CALENDAR_ID_1",
        event_uid: "12346",
        summary: "Conference",
        description: "",
        start: today.add(-2, "days").format(`YYYY-MM-DD`),
        end: today.add(3, "days").format(`YYYY-MM-DD`),
        location: {
            description: "Hawksmoor, 10 Basinghall St, London EC2V 5BQ, UK"
        },
        participation_status: "accepted",
        transparency: "transparent",
        status: "confirmed",
        recurring: false
    },
    {
        calendar_id: "A_CALENDAR_ID_0",
        event_uid: "1232adfsdgsgd1345",
        summary: "Morning standup",
        description:
            "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eius odio dolore iusto velit eveniet exercitationem cumque consectetur. Iusto cupiditate placeat, illum quod aliquam, fugiat pariatur quidem sed repellendus dicta non?",
        start: `${today.add(-2, "days").format(`YYYY-MM-DD`)}T09:26:00`,
        end: `${today.format(`YYYY-MM-DD`)}T09:45:00`,
        participation_status: "accepted",
        transparency: "transparent",
        status: "confirmed",
        recurring: false
    },
    {
        calendar_id: "A_CALENDAR_ID_1",
        event_uid: "12347bxddghjh",
        summary: "1:1 with team leader",
        description: "",
        start: `${today.format(`YYYY-MM-DD`)}T11:00:00`,
        end: `${today.format(`YYYY-MM-DD`)}T11:30:00`,
        location: {
            description: "London office"
        },
        participation_status: "accepted",
        attendees: [
            {
                email: "teamleader@biz.com",
                display_name: "Mr. Big",
                status: "accepted"
            },
            {
                email: "minion@biz.com",
                display_name: "Mindless Drone",
                status: "accepted"
            }
        ],
        transparency: "opaque",
        status: "confirmed",
        recurring: false
    },
    {
        calendar_id: "A_CALENDAR_ID_0",
        event_uid: "evt_external_5b97c80a5c92eb4e31968f9b",
        summary: "Lunch with client",
        description: "",
        start: `${today.format(`YYYY-MM-DD`)}T12:00:00`,
        end: `${today.format(`YYYY-MM-DD`)}T13:30:00`,
        deleted: false,
        created: "2018-09-11T13:50:02Z",
        updated: "2018-09-12T11:19:06Z",
        event_private: false,
        location: {
            description: "Hawksmoor, 10 Basinghall St, London EC2V 5BQ, UK"
        },
        participation_status: "accepted",
        attendees: [
            {
                email: "ceo@client.com",
                display_name: null,
                status: "accepted"
            },
            {
                email: "cto@client.com",
                display_name: null,
                status: "accepted"
            },
            {
                email: "teamleader@biz.com",
                display_name: "Mr. Big",
                status: "accepted"
            },
            {
                email: "tom@biz.com",
                display_name: "Mindless Drone",
                status: "accepted"
            }
        ],
        organizer: {
            email: "ceo@client.com",
            display_name: null
        },
        transparency: "opaque",
        status: "confirmed",
        categories: [],
        recurring: false,
        options: {
            delete: false,
            update: false,
            change_participation_status: true
        }
    },
    {
        calendar_id: "A_CALENDAR_ID_0",
        event_uid: "12347",
        summary: "Request for meeting",
        description:
            "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eius odio dolore iusto velit eveniet exercitationem cumque consectetur. Iusto cupiditate placeat, illum quod aliquam, fugiat pariatur quidem sed repellendus dicta non?",
        start: `${today.format(`YYYY-MM-DD`)}T16:00:00`,
        end: `${today.format(`YYYY-MM-DD`)}T16:30:00`,
        participation_status: "needs_action",
        transparency: "opaque",
        status: "confirmed",
        recurring: false
    },
    {
        calendar_id: "A_CALENDAR_ID_0",
        event_uid: "12321345",
        summary: "Check the servers",
        description:
            "Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eius odio dolore iusto velit eveniet exercitationem cumque consectetur. Iusto cupiditate placeat, illum quod aliquam, fugiat pariatur quidem sed repellendus dicta non?",
        start: `${today.format(`YYYY-MM-DD`)}T15:45:00`,
        end: `${today.format(`YYYY-MM-DD`)}T15:50:00`,
        participation_status: "accepted",
        transparency: "transparent",
        status: "confirmed",
        recurring: false
    },
    {
        calendar_id: "A_CALENDAR_ID_1",
        event_uid: "12321345",
        summary: "Flight AB1234: LHR - LAX",
        start: `${today.format(`YYYY-MM-DD`)}T16:05:00`,
        end: `${today.format(`YYYY-MM-DD`)}T23:35:00`,
        participation_status: "accepted",
        transparency: "transparent",
        status: "confirmed",
        recurring: false
    }
];

const staticUserinfo = {
    sub: "acc_01234567890",
    email: "example@cronofy.com",
    name: "PROFILE_NAME",
    zoneinfo: "Europe/London",
    "cronofy.type": "account",
    "cronofy.data": {
        authorization: { scope: "read_write" },
        profiles: [
            {
                provider_name: "google",
                profile_id: "A_PROFILE_ID",
                profile_name: "example@cronofy.com",
                profile_connected: true,
                profile_initial_sync_required: false,
                profile_calendars: [
                    {
                        calendar_id: "A_CALENDAR_ID_0",
                        calendar_name: "Example Calendar",
                        calendar_readonly: false,
                        calendar_deleted: false,
                        calendar_primary: true,
                        permission_level: "sandbox"
                    },
                    {
                        calendar_id: "A_CALENDAR_ID_1",
                        calendar_name: "Another cal",
                        calendar_readonly: false,
                        calendar_deleted: false,
                        calendar_primary: false,
                        permission_level: "sandbox"
                    }
                ]
            },
            {
                provider_name: "office365",
                profile_id: "rahul_malviya_outlook",
                profile_name: "rahul.malviya@outlook.com",
                profile_connected: true,
                profile_initial_sync_required: false,
                profile_calendars: [
                    {
                        calendar_id: "A_CALENDAR_ID_4",
                        calendar_name: "Holiday",
                        calendar_readonly: false,
                        calendar_deleted: false,
                        calendar_primary: true,
                        permission_level: "sandbox"
                    },
                    {
                        calendar_id: "A_CALENDAR_ID_5",
                        calendar_name: "Personal",
                        calendar_readonly: false,
                        calendar_deleted: false,
                        calendar_primary: false,
                        permission_level: "sandbox"
                    }
                ]
            },
            {
                provider_name: "live_connect",
                profile_id: "ya_chin_ho_office365",
                profile_name: "ya.chin.ho@office365.com",
                profile_connected: true,
                profile_initial_sync_required: true,
                profile_calendars: [
                    {
                        calendar_id: "A_CALENDAR_ID_6",
                        calendar_name: "Testing",
                        calendar_readonly: false,
                        calendar_deleted: false,
                        calendar_primary: true,
                        permission_level: "sandbox"
                    }
                ]
            },
            {
                provider_name: "apple",
                profile_id: "monica_ribeiro_itunes",
                profile_name: "monica-ribeiro@itunes.com",
                profile_connected: false,
                profile_initial_sync_required: false,
                profile_relink_url:
                    "https://app.cronofy.com/relink/apple?email=example@cronofy.com",
                profile_calendars: [
                    {
                        calendar_id: "A_CALENDAR_ID_2",
                        calendar_name: "Work Hours",
                        calendar_readonly: false,
                        calendar_deleted: false,
                        calendar_primary: true,
                        permission_level: "sandbox"
                    },
                    {
                        calendar_id: "A_CALENDAR_ID_3",
                        calendar_name: "Appointments",
                        calendar_readonly: false,
                        calendar_deleted: false,
                        calendar_primary: false,
                        permission_level: "sandbox"
                    }
                ]
            }
        ]
    }
};

export const events = new Promise(function(resolve, reject) {
    resolve(staticEvents);
});

export const userinfo = new Promise(function(resolve, reject) {
    resolve(staticUserinfo);
});

export const eventsWithUserinfo = new Promise(function(resolve, reject) {
    resolve({
        events: staticEvents,
        userinfo: staticUserinfo
    });
});

export const availability = new Promise(function(resolve, reject) {
    const utcOffset = moment().utcOffset();
    const invertedOffset =
        Math.sign(utcOffset) === -1 ? Math.abs(utcOffset) : 0 - utcOffset;
    const offset = invertedOffset / 60;

    const today = moment()
        .add(1, "day")
        .seconds(0);
    const startOfWeek = today
        .startOf("isoWeek")
        .subtract(1, "days")
        .add(7, "days");
    const offsetTime = function(days, time) {
        const timeString = `${startOfWeek
            .clone()
            .format("YYYY-MM-DD")}T${time}:00Z`;
        const output = moment(timeString)
            .add(days, "days")
            .add(offset, "hours");
        return output.utc().format();
    };

    resolve({
        available_periods: [
            {
                start: offsetTime(1, "09:00"),
                end: offsetTime(1, "13:00"),
                participants: [
                    {
                        sub: "acc_5b97a52a5c92eb0cc0400ffe"
                    },
                    {
                        sub: "test_busy_1000-1030_1430-1540_2200-0600"
                    },
                    {
                        sub: "test_busy_1130-1200_1445-1500"
                    }
                ]
            },
            {
                start: offsetTime(2, "10:00"),
                end: offsetTime(2, "13:00"),
                participants: [
                    {
                        sub: "acc_5b97a52a5c92eb0cc0400ffe"
                    },
                    {
                        sub: "test_busy_1000-1030_1430-1540_2200-0600"
                    },
                    {
                        sub: "test_busy_1130-1200_1445-1500"
                    }
                ]
            },
            {
                start: offsetTime(2, "14:00"),
                end: offsetTime(2, "17:30"),
                participants: [
                    {
                        sub: "acc_5b97a52a5c92eb0cc0400ffe"
                    },
                    {
                        sub: "test_busy_1000-1030_1430-1540_2200-0600"
                    },
                    {
                        sub: "test_busy_1130-1200_1445-1500"
                    }
                ]
            },
            {
                start: offsetTime(3, "09:00"),
                end: offsetTime(3, "17:30"),
                participants: [
                    {
                        sub: "acc_5b97a52a5c92eb0cc0400ffe"
                    },
                    {
                        sub: "test_busy_1000-1030_1430-1540_2200-0600"
                    },
                    {
                        sub: "test_busy_1130-1200_1445-1500"
                    }
                ]
            },
            {
                start: offsetTime(4, "09:00"),
                end: offsetTime(4, "17:30"),
                participants: [
                    {
                        sub: "acc_5b97a52a5c92eb0cc0400ffe"
                    },
                    {
                        sub: "test_busy_1000-1030_1430-1540_2200-0600"
                    },
                    {
                        sub: "test_busy_1130-1200_1445-1500"
                    }
                ]
            },
            {
                start: offsetTime(5, "09:00"),
                end: offsetTime(5, "17:30"),
                participants: [
                    {
                        sub: "acc_5b97a52a5c92eb0cc0400ffe"
                    },
                    {
                        sub: "test_busy_1000-1030_1430-1540_2200-0600"
                    },
                    {
                        sub: "test_busy_1130-1200_1445-1500"
                    }
                ]
            },
            {
                start: offsetTime(8, "09:00"),
                end: offsetTime(8, "13:00"),
                participants: [
                    {
                        sub: "acc_5b97a52a5c92eb0cc0400ffe"
                    },
                    {
                        sub: "test_busy_1000-1030_1430-1540_2200-0600"
                    },
                    {
                        sub: "test_busy_1130-1200_1445-1500"
                    }
                ]
            },
            {
                start: offsetTime(8, "14:00"),
                end: offsetTime(8, "17:30"),
                participants: [
                    {
                        sub: "acc_5b97a52a5c92eb0cc0400ffe"
                    },
                    {
                        sub: "test_busy_1000-1030_1430-1540_2200-0600"
                    },
                    {
                        sub: "test_busy_1130-1200_1445-1500"
                    }
                ]
            },
            {
                start: offsetTime(9, "12:00"),
                end: offsetTime(9, "14:30"),
                participants: [
                    {
                        sub: "acc_5b97a52a5c92eb0cc0400ffe"
                    },
                    {
                        sub: "test_busy_1000-1030_1430-1540_2200-0600"
                    },
                    {
                        sub: "test_busy_1130-1200_1445-1500"
                    }
                ]
            },
            {
                start: offsetTime(9, "15:40"),
                end: offsetTime(9, "17:00"),
                participants: [
                    {
                        sub: "acc_5b97a52a5c92eb0cc0400ffe"
                    },
                    {
                        sub: "test_busy_1000-1030_1430-1540_2200-0600"
                    },
                    {
                        sub: "test_busy_1130-1200_1445-1500"
                    }
                ]
            },
            {
                start: offsetTime(9, "09:00"),
                end: offsetTime(9, "10:00"),
                participants: [
                    {
                        sub: "acc_5b97a52a5c92eb0cc0400ffe"
                    },
                    {
                        sub: "test_busy_1000-1030_1430-1540_2200-0600"
                    },
                    {
                        sub: "test_busy_1130-1200_1445-1500"
                    }
                ]
            },
            {
                start: offsetTime(10, "09:00"),
                end: offsetTime(10, "17:30"),
                participants: [
                    {
                        sub: "acc_5b97a52a5c92eb0cc0400ffe"
                    },
                    {
                        sub: "test_busy_1000-1030_1430-1540_2200-0600"
                    },
                    {
                        sub: "test_busy_1130-1200_1445-1500"
                    }
                ]
            }
        ]
    });
});

export const availabilitySlots = new Promise(function(resolve, reject) {
    const utcOffset = moment().utcOffset();
    const invertedOffset =
        Math.sign(utcOffset) === -1 ? Math.abs(utcOffset) : 0 - utcOffset;
    const offset = invertedOffset / 60;

    const today = moment()
        .add(1, "day")
        .seconds(0);
    const startOfWeek = today
        .startOf("isoWeek")
        .subtract(1, "days")
        .add(7, "days");
    const offsetTime = function(days, time) {
        const timeString = `${startOfWeek
            .clone()
            .format("YYYY-MM-DD")}T${time}:00Z`;
        const output = moment(timeString)
            .add(days, "days")
            .add(offset, "hours");
        return output.utc().format();
    };

    const createMockSlot = (day, start, end) => ({
        start: offsetTime(day, start),
        end: offsetTime(day, end),
        participants: [
            {
                sub: "acc_5b97a52a5c92eb0cc0400ffe"
            },
            {
                sub: "test_busy_1000-1030_1430-1540_2200-0600"
            },
            {
                sub: "test_busy_1130-1200_1445-1500"
            }
        ]
    });

    resolve({
        available_slots: [
            createMockSlot(1, "09:00", "09:30"),
            createMockSlot(1, "09:30", "10:00"),
            createMockSlot(1, "10:00", "10:30"),
            createMockSlot(1, "10:30", "11:00"),
            createMockSlot(1, "11:00", "11:30"),
            createMockSlot(1, "11:30", "12:00"),
            createMockSlot(1, "12:00", "12:30"),
            createMockSlot(1, "12:30", "13:00"),
            createMockSlot(1, "14:00", "14:30"),
            createMockSlot(2, "14:30", "15:00"),
            createMockSlot(2, "15:00", "15:30"),
            createMockSlot(2, "16:30", "17:00"),
            createMockSlot(2, "17:00", "17:30"),
            createMockSlot(3, "08:00", "08:30"),
            createMockSlot(3, "08:30", "09:00"),
            createMockSlot(3, "09:00", "09:30"),
            createMockSlot(3, "09:30", "10:00"),
            createMockSlot(3, "10:00", "10:30"),
            createMockSlot(3, "10:30", "11:00"),
            createMockSlot(3, "11:00", "11:30"),
            createMockSlot(3, "11:30", "12:00"),
            createMockSlot(3, "12:00", "12:30"),
            createMockSlot(3, "12:30", "13:00"),
            createMockSlot(3, "14:00", "14:30"),
            createMockSlot(4, "09:00", "09:30"),
            createMockSlot(4, "09:30", "10:00"),
            createMockSlot(4, "10:00", "10:30"),
            createMockSlot(4, "12:00", "12:30"),
            createMockSlot(4, "12:30", "13:00"),
            createMockSlot(4, "16:00", "16:30"),
            createMockSlot(5, "09:00", "09:30"),
            createMockSlot(5, "09:30", "10:00"),
            createMockSlot(5, "10:00", "10:30"),
            createMockSlot(5, "10:30", "11:00"),
            createMockSlot(5, "11:00", "11:30"),
            createMockSlot(5, "11:30", "12:00"),
            createMockSlot(5, "12:00", "12:30"),
            createMockSlot(5, "13:30", "14:00"),
            createMockSlot(5, "14:00", "14:30"),
            createMockSlot(8, "09:00", "09:30"),
            createMockSlot(8, "09:30", "10:00"),
            createMockSlot(8, "10:00", "10:30"),
            createMockSlot(8, "10:30", "11:00"),
            createMockSlot(8, "11:00", "11:30"),
            createMockSlot(8, "14:00", "14:30"),
            createMockSlot(9, "09:00", "09:30"),
            createMockSlot(9, "09:30", "10:00"),
            createMockSlot(9, "10:00", "10:30"),
            createMockSlot(9, "10:30", "11:00"),
            createMockSlot(9, "11:00", "11:30")
        ]
    });
});

export const availabilityOverlappingSlots = (
    interval = 30,
    duration = 60,
    availablePeriods = false,
    tzid
) =>
    new Promise((resolve, reject) => {
        if (availablePeriods) {
            const dynamicSlots = generativeAvailabilityOverlappingSlots(
                interval,
                duration,
                availablePeriods,
                tzid
            );
            resolve({
                available_slots: dynamicSlots
            });
        }

        const utcOffset = moment().utcOffset();
        const invertedOffset =
            Math.sign(utcOffset) === -1 ? Math.abs(utcOffset) : 0 - utcOffset;
        const offset = invertedOffset / 60;

        const today = moment()
            .add(1, "day")
            .seconds(0);
        const startOfWeek = today
            .startOf("isoWeek")
            .subtract(1, "days")
            .add(7, "days");
        const offsetTime = function(days, time) {
            const timeString = `${startOfWeek
                .clone()
                .format("YYYY-MM-DD")}T${time}:00Z`;
            const output = moment(timeString)
                .add(days, "days")
                .add(offset, "hours");
            return output.utc().format();
        };

        const createMockSlot = (day, start, end) => ({
            start: offsetTime(day, start),
            end: offsetTime(day, end),
            participants: [
                {
                    sub: "acc_5b97a52a5c92eb0cc0400ffe"
                },
                {
                    sub: "test_busy_1000-1030_1430-1540_2200-0600"
                },
                {
                    sub: "test_busy_1130-1200_1445-1500"
                }
            ]
        });

        const createPeriod = (day, startHour, endHour, interval, duration) => {
            const period = [];
            const starts =
                interval === 60
                    ? [0]
                    : interval === 15
                    ? [0, 15, 30, 45]
                    : [0, 30];

            for (let i = startHour; i <= endHour; i++) {
                const hour = i.toString().padStart(2, "0");
                for (let j = 0; j < starts.length; j++) {
                    const minutes = starts[j].toString().padStart(2, "0");
                    const endMinutes = ((starts[j] + duration) % 60)
                        .toString()
                        .padStart(2, "0");
                    const endHour =
                        starts[j] + duration >= 60
                            ? (i + 1).toString().padStart(2, "0")
                            : hour;
                    const start = `${hour}:${minutes}`;
                    const end = `${endHour}:${endMinutes}`;
                    period.push(createMockSlot(day, start, end));
                }
            }

            return period;
        };

        let availableSlots = [
            ...createPeriod(1, 9, 10, interval, duration),
            ...createPeriod(1, 14, 16, interval, duration),
            ...createPeriod(2, 9, 12, interval, duration),
            ...createPeriod(2, 15, 16, interval, duration),
            ...createPeriod(3, 8, 12, interval, duration),
            ...createPeriod(3, 15, 16, interval, duration),
            ...createPeriod(4, 9, 11, interval, duration),
            ...createPeriod(4, 14, 15, interval, duration),
            ...createPeriod(5, 10, 11, interval, duration),
            ...createPeriod(5, 13, 14, interval, duration),
            ...createPeriod(8, 10, 15, interval, duration),
            ...createPeriod(9, 8, 12, interval, duration),
            ...createPeriod(9, 15, 16, interval, duration),
            ...createPeriod(10, 9, 11, interval, duration),
            ...createPeriod(10, 14, 16, interval, duration),
            ...createPeriod(11, 9, 12, interval, duration)
        ];

        resolve({
            available_slots: availableSlots
        });
    });

export const generativeAvailabilityOverlappingSlots = (
    interval = 30,
    duration = 60,
    query,
    tzid
) => {
    const createPeriodUsingQuery = (
        period,
        interval,
        duration,
        tzid,
        acc = []
    ) => {
        // // 80% chance of creating an available slot
        // const availableSlot = Math.random() * 100 < 80;
        // 100% chance of creating an available slot
        const availableSlot = true;

        const slotEnd = moment
            .tz(period.start, "YYYY-MM-DDTHH:mm:00Z", tzid)
            .add(duration, "minutes");

        const newPeriodStart = moment
            .tz(period.start, "YYYY-MM-DDTHH:mm:00Z", tzid)
            .add(interval, "minutes")
            .utc()
            .format("YYYY-MM-DDTHH:mm[:00Z]");

        const end = moment.tz(period.end, "YYYY-MM-DDTHH:mm:00Z", tzid);

        if (slotEnd.diff(end, "minutes") > 0) {
            return acc;
        }

        if (availableSlot) {
            acc.push({
                start: period.start,
                end: slotEnd.utc().format("YYYY-MM-DDTHH:mm[:00Z]"),
                participants: [
                    {
                        sub: "acc_5b97a52a5c92eb0cc0400ffe"
                    },
                    {
                        sub: "test_busy_1000-1030_1430-1540_2200-0600"
                    },
                    {
                        sub: "test_busy_1130-1200_1445-1500"
                    }
                ]
            });
        }

        return createPeriodUsingQuery(
            {
                ...period,
                start: newPeriodStart
            },
            interval,
            duration,
            tzid,
            acc
        );
    };
    const calculatedSlots = query
        .map(period => createPeriodUsingQuery(period, interval, duration, tzid))
        .reduce((curr, acc) => [...acc, ...curr]);

    return calculatedSlots;
};

export const default_availability_rules = [
    {
        day: "monday",
        start_time: "09:00",
        end_time: "17:00"
    },
    {
        day: "tuesday",
        start_time: "09:00",
        end_time: "17:00"
    },
    {
        day: "wednesday",
        start_time: "09:00",
        end_time: "17:00"
    },
    {
        day: "thursday",
        start_time: "09:00",
        end_time: "17:00"
    },
    {
        day: "friday",
        start_time: "09:00",
        end_time: "17:00"
    }
];

export const availability_rules = new Promise(function(resolve, reject) {
    const sniffedTimezone = moment.tz.guess();
    resolve({
        availability_rule: {
            availability_rule_id: "default",
            tzid: sniffedTimezone,
            calendar_ids: ["A_CALENDAR_ID_0"],
            weekly_periods: default_availability_rules
        }
    });
});

export const revokeProfile = new Promise(function(resolve, reject) {
    resolve({
        status: 202
    });
});
