import merge from "deepmerge";
import { translations } from "./translations";

export const parseConnectionDomains = (
    dataCenter = false,
    customApiDomain = false,
    customAppDomain = false
) => {
    let dataCenterSuffix =
        dataCenter && dataCenter !== "us" ? `-${dataCenter}` : "";
    let apiDomain =
        customApiDomain || `https://api${dataCenterSuffix}.cronofy.com`;
    let appDomain =
        customAppDomain || `https://app${dataCenterSuffix}.cronofy.com`;
    return {
        apiDomain,
        appDomain
    };
};

export const parseToken = (options, elementSlug = false, log) => {
    const docsHash = elementSlug ? `#${elementSlug}` : "";
    let token = false;
    if (typeof options.token !== "undefined") {
        log.warn(
            "`token` option has been deprecated in v1.0.0. Please use `element_token` option instead.",
            { docsSlug: `upgrade-v0-to-v1/${docsHash}` }
        );
        token = options.token;
    }
    if (typeof options.element_token !== "undefined") {
        token = options.element_token;
    }
    return token;
};

export const parseTarget = (options, elementSlug, log) => {
    const docsHash = elementSlug ? `#${elementSlug}` : "";
    let target = false;

    if (typeof options.target !== "undefined") {
        log.warn(
            "`target` option has been deprecated in v1.0.0. Please use `target_id` option instead.",
            { docsSlug: `upgrade-v0-to-v1/${docsHash}` }
        );
        target = options.target;
    }
    if (typeof options.target_id !== "undefined") {
        target = options.target_id;
    }

    if (!target) {
        log.warn(
            `Using the default ID \`cronofy-element-${elementSlug}\` for mounting markup. You should specify a custom ID for your mounting point.`
        );
        target = `cronofy-element-${elementSlug}`;
    }

    return target;
};

export const parseQuery = (options, elementSlug, log) => {
    const docsHash = elementSlug ? `#${elementSlug}` : "";
    let query = false;

    if (typeof options.query !== "undefined") {
        log.warn(
            "`query` option has been deprecated in v1.0.0. Please use `availability_query` option instead.",
            { docsSlug: `upgrade-v0-to-v1/${docsHash}` }
        );
        query = options.query;
    }

    if (typeof options.availability_query !== "undefined") {
        query = options.availability_query;

        if (typeof query.available_periods === "undefined") {
            log.error(
                "You need to provide an `availability_query.available_periods` option.",
                { docsSlug: "availability-viewer/#availability_query" }
            );
            return false;
        }

        if (typeof query.required_duration === "undefined") {
            log.error(
                "You need to provide an `availability_query.required_duration` option.",
                { docsSlug: "availability-viewer/#availability_query" }
            );
            return false;
        }
    }

    if (!query) {
        log.error("You need to provide an `availability_query` option.", {
            docsSlug: "availability-viewer/#availability_query"
        });
    }

    return query;
};

export const parseTranslations = customTranslations => {
    if (typeof customTranslations !== "undefined") {
        return merge(translations, customTranslations);
    }
    return translations;
};
