import { darken, lighten } from "polished";

export const logColor = color =>
    console.log(`%c ${color.padEnd(25, " ")} `, `background: ${color};`);

export const parseStyleOptions = (
    styleOptions = {},
    elementName = "CronofyElement",
    options = {}
) => {
    let customColors = {};
    if (typeof options.colors !== "undefined") {
        console.warn(
            "`colors` option has been deprecated. Please use `styles.colors` instead."
        );
        customColors = options.colors;
    }
    const calendars = customColors.calendars || {};
    const colors = styleOptions.colors || {};
    const theme = {
        ...styleOptions,
        prefix: styleOptions.prefix || elementName,
        colors: {
            calendars: calendars,
            hairline: "#D8D8D8",
            primary: "#15B3D6",
            primaryLight: "#B8E8F2",
            // primaryDark: "#B8E8F2",
            secondary: "#CB359B",
            // secondaryLight: "#B8E8F2",
            // secondaryDark: "#B8E8F2",
            background: "#F2F2F2",
            available: "#E2FAC8",
            availableHover: "#C0E992",
            availableActive: "#7ED321",
            unavailable: "#FFFFFF",
            unavailableHover: "#E6E6E6",
            unavailableActive: "#CCCCCC",
            black: "#4D4D4D",
            grey: "#6F6F6F",
            greyMid: "#999999",
            greyLight: "#E4EBF2",
            greyPale: "#F5F7F9",
            white: "#FFFFFF",
            red: "#DC3E15",
            redLight: "#EA8B73",
            redDark: "#C23712",
            yellow: "#F5A623",
            green: "#7ED321",
            greenLight: "#C0E992",
            ...colors
        }
    };
    if (colors.unavailable && !colors.unavailableHover) {
        theme.colors.unavailableHover = darken(0.1, theme.colors.unavailable);
    }

    if (colors.available && !colors.availableHover) {
        theme.colors.availableHover = darken(0.1, colors.available);
    }

    if (colors.available && !colors.availableActive) {
        theme.colors.availableActive = darken(0.2, colors.available);
    }
    if (colors.unavailable && !colors.unavailableActive) {
        theme.colors.unavailableActive = darken(0.2, colors.unavailable);
    }

    theme.colors.whiteDark = darken(0.1, theme.colors.white);
    theme.colors.primaryDark = darken(0.1, theme.colors.primary);
    theme.colors.secondaryDark = darken(0.1, theme.colors.secondary);
    theme.colors.secondaryLight = lighten(0.1, theme.colors.secondary);

    // logColor(theme.colors.unavailable);
    // logColor(theme.colors.unavailableHover);
    // logColor(theme.colors.unavailableActive);
    // logColor(theme.colors.available);
    // logColor(theme.colors.availableHover);
    // logColor(theme.colors.availableActive);
    return theme;
};
