export const errorWrap = (elementName, message, docsSlug = "") => {
    return `UI Elements: ${elementName}\n${message}\nhttps://docs.cronofy.com/developers/ui-elements/${docsSlug}\n`;
};

const buildLogNotification = (type, elementName, message, url = "") => {
    const notification = {
        notification: {
            type: type,
            element: elementName,
            message,
            url: `https://docs.cronofy.com/developers/ui-elements/${url}`
        }
    };
    return notification;
};

// `logs` options: "error" | "warn" | "info" | "none"
export const logConstructor = (
    mode = "warn",
    elementName = "General",
    callback = false
) => {
    const _log = (type = "log", ...message) => {
        // Sometimes we just want to use a single string as a message,
        // but occasionally we'll want to include an error object too.
        // The "rest" (`...`) catches the string *and* any included objects.

        // This is where we filter out undefined error objects (just in case)
        const messages = message.filter(m => typeof m !== "undefined");

        if (mode === "none") return;
        if (mode === "error" && type !== "error") return;
        if (mode === "warn" && type !== "error" && type !== "warn") return;

        // Now we'll "spread" (`...` again) to log either just the message
        // or the message and any included objects.
        console[type](...messages);
    };

    const buildLog = type => (
        message = "There was a problem with the UI Elements",
        extras = {}
    ) => {
        const messageString = errorWrap(elementName, message, extras.docsSlug);
        if (callback) {
            callback(
                buildLogNotification(
                    type,
                    elementName,
                    message,
                    extras.docsSlug
                )
            );
        }
        return _log(type, messageString, extras.errorObject);
    };

    return {
        log: buildLog("log"),
        info: buildLog("info"),
        warn: buildLog("warn"),
        error: buildLog("error")
    };
};

export const errorMessages = {
    401: {
        message:
            "There was a problem fetching data: check your element_token is valid.",
        docsSlug: "authentication/#generating-a-token"
    },
    403: {
        message:
            "Incorrect permissions: check the `permissions` array when creating your element_token",
        docsSlug: "authentication/#permissions"
    },
    422: {
        message: "There was a problem with your availability query.",
        docsSlug: "availability-viewer/#availability_query"
    }
};
