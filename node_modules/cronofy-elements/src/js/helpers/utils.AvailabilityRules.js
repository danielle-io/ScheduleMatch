import * as connections from "./connections";
import moment from "moment-timezone";
import { default_availability_rules } from "./mocks";

export const buildSlotID = (dayIndex, slotIndex) => {
    const dayID = dayIndex.toString().padStart(2, "0");
    const slotID = slotIndex.toString().padStart(2, "0");
    return `${dayID}_${slotID}`;
};

export const arrayOfDaySlots = (slots, day, slotsPerDay) => {
    const mapableSlots = [];
    for (let i = 0; i < slotsPerDay; i++) {
        const slotID = buildSlotID(day, i);
        const slot = slots[slotID];
        mapableSlots.push(slot);
    }
    return mapableSlots.filter(slot => typeof slot !== "undefined");
};

export const calculateSlotsPerDay = (duration, time_1, time_2) => {
    const minutesDiff = moment(time_1, "HH:mm").diff(
        moment(time_2, "HH:mm"),
        "minutes"
    );

    const absoluteValue = Math.abs(minutesDiff / duration);
    const roundedValue = Math.floor(absoluteValue);

    return roundedValue;
};

export const parseExtras = (options = {}) => {
    const heightsDictionary = {
        15: 16,
        30: 26,
        60: 40
    };

    let duration = 60;
    if (typeof options.duration !== "undefined") {
        console.warn(
            "CronofyElements.AvailabilityRules: the `duration` option has been deprecated in v1.0.0. Please use `config.duration` instead. https://docs.cronofy.com/developers/ui-elements/availability-rules/#config"
        );
        duration = parseInt(options.duration, 10);
    }
    if (options.config && typeof options.config.duration !== "undefined") {
        duration = parseInt(options.config.duration, 10);
    }
    if (duration !== 15 && duration !== 30 && duration !== 60) {
        console.warn(
            "CronofyElements.AvailabilityRules: `config.duration` only supports values of `15`, `30`, and `60`. https://docs.cronofy.com/developers/ui-elements/availability-rules/#config.duration"
        );
        duration = 60;
    }

    let start = "09:00";
    if (typeof options.start_time !== "undefined") {
        console.warn(
            "CronofyElements.AvailabilityRules: the `start_time` option has been deprecated in v1.0.0. Please use `config.start_time` instead. https://docs.cronofy.com/developers/ui-elements/availability-rules/#config"
        );
        start = options.start_time;
    }
    if (options.config && typeof options.config.start_time !== "undefined") {
        start = options.config.start_time;
    }

    let end = "17:30";
    if (typeof options.end_time !== "undefined") {
        console.warn(
            "CronofyElements.AvailabilityRules: the `end_time` option has been deprecated in v1.0.0. Please use `config.end_time` instead. https://docs.cronofy.com/developers/ui-elements/availability-rules/#config"
        );
        end = options.end_time;
    }
    if (options.config && typeof options.config.end_time !== "undefined") {
        end = options.config.end_time;
    }

    const tzid = options.tzid ? options.tzid : "Etc/UTC";
    const slotHeight = {
        height: heightsDictionary[duration] //(16 * 4) / (duration / interval)
    };

    const slotsPerDay = calculateSlotsPerDay(duration, end, start);

    return {
        limits: {
            duration,
            start,
            end,
            tzid,
            slotsPerDay
        },
        slotHeight
    };
};

export const parseAccountOptions = (options = {}) => {
    const accountOptions = {
        availability_rule_id: options.availability_rule_id || "default",
        tzid: options.tzid || "Etc/UTC"
    };
    if (options.calendar_ids) {
        accountOptions.calendar_ids = options.calendar_ids;
    }

    return accountOptions;
};

export const buildRuleTemplate = (options = {}) => {
    const tzid = options.tzid || "Etc/UTC";
    return {
        availability_rule: {
            availability_rule_id: "default",
            tzid,
            calendar_ids: [],
            weekly_periods: default_availability_rules
        }
    };
};
