import { compose } from "./functional";

// Convert object into map-able array of key/value objects
export const objectToArray = (object, keepKey = true) => {
    let items = [];
    for (let key in object) {
        if (keepKey) {
            items.push({ key, value: object[key] });
        } else {
            items.push(object[key]);
        }
    }
    return items;
};

export const truncateString = (str, length = 240) =>
    str.length <= length - 2 ? str : `${str.slice(0, length)}...`;

export const uniqueItems = array =>
    array.filter((elem, pos, arr) => arr.indexOf(elem) == pos);

export const objectIsEmpty = obj => {
    for (let key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
};

export const capitalizeFirstLetter = string =>
    string.charAt(0).toUpperCase() + string.slice(1);

export const replaceUnderscores = string => string.replace(/_/g, " ");

export const turnSlugIntoString = slug =>
    compose(capitalizeFirstLetter, replaceUnderscores)(slug);

// Some tricksy ES7 destructuring... Essentially Array.filter() but for an object.
// Might there be a more elegant way to do this?
export const filterObject = (key, { [key]: _, ...rest }) => rest;
