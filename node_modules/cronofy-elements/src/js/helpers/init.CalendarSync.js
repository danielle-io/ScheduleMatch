import {
    parseToken,
    parseTarget,
    parseConnectionDomains,
    parseTranslations
} from "./init";
import { logConstructor } from "./logging";

export const parseCalendarSyncOptions = (options = {}) => {
    let config = typeof options.config === "undefined" ? {} : options.config;
    const logs = typeof config.logs === "undefined" ? "warn" : config.logs;
    const log = logConstructor(logs, "Calendar Sync");

    options.error = false;
    const demoMode = typeof options.demo === "undefined" ? false : options.demo;
    if (demoMode) {
        log.warn("You are running in demo mode. No API requests will be made");
    }

    const token = parseToken(options, "calendar-sync", log);

    const target = parseTarget(options, "calendar-sync", log);

    if (!options.authorization_url) {
        if (typeof options.authorization === "undefined" && !demoMode) {
            log.error("You need to specify authorization options.");
            return false;
        } else if (typeof options.authorization === "undefined" && demoMode) {
            options.authorization = {
                redirect_uri: "REDIRECT_URI",
                client_id: "CLIENT_ID",
                scope: "SCOPE"
            };
        } else {
            if (
                typeof options.authorization.redirect_uri === "undefined" &&
                !demoMode
            ) {
                log.error(
                    "You need to specify authorization option: `redirect_uri`."
                );
                return false;
            }
            if (
                typeof options.authorization.client_id === "undefined" &&
                !demoMode
            ) {
                log.error(
                    "You need to specify authorization option: `client_id`."
                );
                return false;
            }
            if (
                typeof options.authorization.scope === "undefined" &&
                !demoMode
            ) {
                log.error("You need to specify authorization option: `scope`.");
                return false;
            }
        }
    }

    options.single_profile =
        typeof options.single_profile !== "undefined"
            ? options.single_profile
            : false;

    const translations = parseTranslations(
        options.translations,
        "availability_rules"
    );

    delete options.target_id;
    delete options.element_token;
    delete options.translations;

    const domains = parseConnectionDomains(
        options.data_center,
        options.api_domain,
        options.app_domain
    );

    return {
        ...options,
        config: { ...config, logs },
        target,
        token,
        domains,
        translations
    };
};
