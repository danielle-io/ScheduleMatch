import React from "react";

import AgendaApp from "./components/Agenda/Agenda";
import SlotPickerApp from "./components/SlotPicker/SlotPicker";
import AvailabilityViewerApp from "./components/AvailabilityViewer/AvailabilityViewer";
import AvailabilityRulesApp from "./components/AvailabilityRules/AvailabilityRules";
import CalendarSyncApp from "./components/CalendarSync/CalendarSync";

import { parseAgendaOptions } from "./helpers/init.Agenda";
import { parseSlotPickerOptions } from "./helpers/init.SlotPicker";
import { parseAvailabilityViewerOptions } from "./helpers/init.AvailabilityViewer";
import { parseAvailabilityRulesOptions } from "./helpers/init.AvailabilityRules";
import { parseCalendarSyncOptions } from "./helpers/init.CalendarSync";

import { generateElementAPI } from "./helpers/generator";
import { getNavigatorLanguage } from "./helpers/i18n";

import "./icons";

import {
    AVAILABLE_PERIODS,
    AVAILABLE_DAYS
} from "../../stories/story-temps/mock-data";

const LOCALE = getNavigatorLanguage();

const globalOptionFallbacks = {
    locale: LOCALE
};

export const Agenda = options => {
    // Make sure the correct props are passed to the component
    const renderAgenda = (key, options) => (
        <AgendaApp
            key={key}
            options={{ ...globalOptionFallbacks, ...options }}
        />
    );
    // Generate and render the component. The `return` is important
    // here, as it exposes the `update` method (which can be used
    // after the inital page-load).
    return generateElementAPI(
        renderAgenda,
        options,
        parseAgendaOptions,
        "Agenda View"
    );
};

export const SlotPicker = options => {
    // Make sure the correct props are passed to the component
    const renderSlotPicker = (key, options) => (
        <SlotPickerApp
            key={key}
            options={{ ...globalOptionFallbacks, ...options }}
            view={"days"}
            days={AVAILABLE_DAYS}
            slots={AVAILABLE_PERIODS}
        />
    );
    // Generate and render the component. The `return` is important
    // here, as it exposes the `update` method (which can be used
    // after the inital page-load).
    return generateElementAPI(
        renderSlotPicker,
        options,
        parseSlotPickerOptions,
        "Slot Picker"
    );
};

export const AvailabilityViewer = options => {
    // Make sure the correct props are passed to the component
    const renderElement = (key, options) => (
        <AvailabilityViewerApp
            key={key}
            options={{ ...globalOptionFallbacks, ...options }}
            error={options.error}
        />
    );
    // Generate and render the component. The `return` is important
    // here, as it exposes the `update` method (which can be used
    // after the inital page-load).
    return generateElementAPI(
        renderElement,
        options,
        parseAvailabilityViewerOptions,
        "Availability Viewer"
    );
};

export const AvailabilityRules = options => {
    // Make sure the correct props are passed to the component
    const renderElement = (key, options) => (
        <AvailabilityRulesApp
            key={key}
            options={{ ...globalOptionFallbacks, ...options }}
            error={options.error}
        />
    );
    // Generate and render the component. The `return` is important
    // here, as it exposes the `update` method (which can be used
    // after the inital page-load).
    return generateElementAPI(
        renderElement,
        options,
        parseAvailabilityRulesOptions,
        "Availability Rules"
    );
};

export const CalendarSync = options => {
    // Make sure the correct props are passed to the component
    const renderElement = (key, options) => (
        <CalendarSyncApp key={key} options={options} error={options.error} />
    );
    // Generate and render the component. The `return` is important
    // here, as it exposes the `update` method (which can be used
    // after the inital page-load).
    return generateElementAPI(
        renderElement,
        options,
        parseCalendarSyncOptions,
        "Calendar Sync"
    );
};
