import React, { useState, useEffect } from "react";
import moment from "moment-timezone";
import { css, jsx } from "@emotion/core";

import * as connections from "../../helpers/connections";
import { parseStyleOptions } from "../../helpers/theming";
import {
    getDaysFromAvailablePeriods,
    arangeSlotsByDay
} from "../../helpers/slots";
import { i18nConstructor } from "../../helpers/i18n";
import { logConstructor } from "../../helpers/logging";

import Container from "../generic/Container";
import Error from "../generic/Error";
import TransitionSlide from "../generic/TransitionSlide";
import Days from "./Days";
import TimeSlots from "./TimeSlots";
import Confirm from "./Confirm";

export const DaysContext = React.createContext();
export const LoggingContext = React.createContext();
export const I18nContext = React.createContext();
export const SlotsContext = React.createContext();
export const StatusContext = React.createContext();
export const ThemeContext = React.createContext();

const SlotPicker = ({ options, view }) => {
    const [slots, setSlots] = useState({ slots: [], day: false });
    const [days, setDays] = useState([]);

    const [theme, setTheme] = useState({
        ...parseStyleOptions(
            { height: "auto", padding: "10px", ...options.styles },
            "SlotPicker"
        )
    });

    const [i18n, setI18n] = useState(
        i18nConstructor("slot_picker", options.locale, options.translations)
    );

    const [log, setLog] = useState(
        logConstructor(options.config.logs, "Slot Picker", options.callback)
    );

    const [status, setStatus] = useState({
        view: "days", // days | slots | confirm
        direction: "upwards",
        mode: options.config.mode,
        selected: false,
        day: false,
        loading: true,
        error: false,
        locale: options.locale,
        tzid: options.tzid,
        callback: options.callback
            ? options.callback
            : () => log.info("No `callback` option has been provided")
    });

    const innerWrapper = React.createRef();
    const outerWrapper = React.createRef();

    const tzChange = timezone => {
        log.info(`Timezone updated to ${timezone}`);
    };

    const selectDay = day => {
        setSlots({ ...slots, day });
        setStatus({
            ...status,
            view: "slots",
            direction: "upwards"
        });
    };

    const backToDays = () => {
        setSlots({ ...slots, day: false });
        setStatus({
            ...status,
            view: "days",
            direction: "downwards",
            selection: false
        });
    };

    const backToSlots = () => {
        setStatus({
            ...status,
            view: "slots",
            direction: "downwards",
            selection: false
        });
    };

    const confirmSelection = slot => {
        const notification = {
            notification: {
                type: "slot_selected",
                slot: slot
            }
        };
        status.callback(notification);
    };

    const selectSlot = slot => {
        const confirmStepRequired = options.confirm || true;
        if (confirmStepRequired) {
            setStatus({
                ...status,
                view: "confirm",
                direction: "upwards",
                selected: slot
            });
        } else {
            confirmSelection(slot);
        }
    };

    useEffect(() => {
        const query = {
            response_format: "overlapping_slots",
            ...options.query
        };

        connections
            .getAvailability(
                options.token,
                options.domains.apiDomain,
                query,
                `SlotPicker`,
                status.tzid,
                options.demo
            )
            .then(res => {
                if (typeof res.available_slots === "undefined") {
                    setStatus({
                        ...status,
                        error: {
                            type: 400,
                            message: "There was a problem loading the data."
                        },
                        loading: false
                    });
                    return;
                }
                const daysFromPeriods = getDaysFromAvailablePeriods(
                    res.available_slots,
                    status.locale
                );
                const calculatedSlots = arangeSlotsByDay(
                    daysFromPeriods,
                    res.available_slots,
                    status.locale
                );

                setStatus({
                    ...status,
                    view: view,
                    loading: false,
                    error: false
                });

                setDays(daysFromPeriods);
                setSlots({ ...slots, slots: calculatedSlots });
            })
            .catch(error => {
                setStatus({
                    ...status,
                    view: view,
                    loading: false,
                    error
                });

                const errorMessage = error.message ? error.message : error;
                const errorOutput = {};
                if (error.docsSlug) {
                    errorOutput.docsSlug = error.docsSlug;
                }
                if (error.body) {
                    errorOutput.errorObject = error.body;
                }
                log.error(errorMessage, errorOutput);
            });
    }, []);

    useEffect(() => {
        const newHeight = innerWrapper.current.clientHeight;
        const tempTarget = outerWrapper.current;
        setTimeout(() => {
            if (tempTarget) {
                tempTarget.style.height = `${newHeight}px`;
            }
        }, 400);
    }, [slots, status.view]);

    return (
        <Container
            style={css`
                max-width: 300px;
                margin-left: auto;
                margin-right: auto;
                min-height: 200px;
            `}
            minHeight={"0"}
            height={theme.height}
            className={`${theme.prefix}`}
        >
            <LoggingContext.Provider value={log}>
                {status.error ? (
                    <Error message={i18n.t("global_error")} theme={theme} />
                ) : (
                    <div
                        ref={outerWrapper}
                        css={css`
                            height: 100%;
                            flex-grow: 1;
                            transition: height 0.2s;
                            overflow: hidden;
                        `}
                    >
                        <TransitionSlide
                            direction={status.direction}
                            keyProp={status.view}
                        >
                            <div
                                ref={innerWrapper}
                                css={css`
                                    flex-grow: 1;
                                `}
                            >
                                <I18nContext.Provider value={i18n}>
                                    <ThemeContext.Provider value={theme}>
                                        <SlotsContext.Provider value={slots}>
                                            <DaysContext.Provider value={days}>
                                                <StatusContext.Provider
                                                    value={[status, setStatus]}
                                                >
                                                    <React.Fragment>
                                                        {status.view ===
                                                        "days" ? (
                                                            <Days
                                                                tzChange={
                                                                    tzChange
                                                                }
                                                                selectDay={
                                                                    selectDay
                                                                }
                                                            />
                                                        ) : null}
                                                        {status.view ===
                                                        "slots" ? (
                                                            <TimeSlots
                                                                backToDays={
                                                                    backToDays
                                                                }
                                                                selectSlot={
                                                                    status.mode ===
                                                                    "no_confirm"
                                                                        ? confirmSelection
                                                                        : selectSlot
                                                                }
                                                            />
                                                        ) : null}
                                                        {status.view ===
                                                        "confirm" ? (
                                                            <Confirm
                                                                back={
                                                                    backToSlots
                                                                }
                                                                confirm={
                                                                    confirmSelection
                                                                }
                                                            />
                                                        ) : null}
                                                    </React.Fragment>
                                                </StatusContext.Provider>
                                            </DaysContext.Provider>
                                        </SlotsContext.Provider>
                                    </ThemeContext.Provider>
                                </I18nContext.Provider>
                            </div>
                        </TransitionSlide>
                    </div>
                )}
            </LoggingContext.Provider>
        </Container>
    );
};

export default SlotPicker;
