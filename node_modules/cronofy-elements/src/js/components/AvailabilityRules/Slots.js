import React, { useContext } from "react";
import { css, jsx } from "@emotion/core";

import { SlotsContext, ThemeContext, ExtrasContext } from "./AvailabilityRules";
import { DragContext } from "./Week";

import Slot from "./Slot";
import { parseSlotsIntoDays } from "../../helpers/slots.rules";
import { arrayOfDaySlots } from "../../helpers/utils.AvailabilityRules";

const Slots = () => {
    const { slots, setSlots } = useContext(SlotsContext);
    const [drag, setDrag] = useContext(DragContext);
    const [extras, setExtras] = useContext(ExtrasContext);
    const [theme, setTheme] = useContext(ThemeContext);
    const days = parseSlotsIntoDays(slots, extras.limits.slotsPerDay);

    const toggleMultiple = (IDs, status) => {
        const availability = status === "available";

        const newSlots = {};
        IDs.forEach(ID => {
            newSlots[ID] = { ...slots[ID], available: availability };
        });

        setSlots({ ...slots, ...newSlots });
    };

    const handleMouseOut = () => {
        if (drag.mouseDown) {
            toggleMultiple(drag.dragged, drag.toggleState);
            setDrag({
                mouseDown: false,
                toggleState: true,
                dragged: [],
                dragStart: false
            });
        }
    };

    const daysList = days.map((day, i) => {
        const mappableSlots = arrayOfDaySlots(
            day.slots,
            i,
            extras.limits.slotsPerDay
        );
        return (
            <div
                key={day.day}
                css={css`
                    display: block;
                    margin: 0;
                    padding: 0;
                    width: ${theme.sizes.columnWidth}px;
                    flex-shrink: 1;
                    z-index: 3;
                `}
                className={`${theme.prefix}__slots-column`}
            >
                {mappableSlots.map((slot, i) => {
                    const reverseOptions = {
                        15: 4,
                        30: 2,
                        60: 1
                    };
                    const first = i < reverseOptions[extras.limits.duration];
                    return (
                        <Slot
                            key={`${day.day}_${slot.start}`}
                            slot={slot}
                            toggleMultiple={toggleMultiple}
                            first={first}
                        />
                    );
                })}
            </div>
        );
    });
    return (
        <div
            css={css`
                display: flex;
                margin: 0;
                padding: 0;
                width: 100%;
                align-content: stretch;
                position: absolute;
                top: 0;
                left: 0;
            `}
            className={`${theme.prefix}__slots-columns`}
            onMouseLeave={handleMouseOut}
        >
            {daysList}
        </div>
    );
};

export default Slots;
