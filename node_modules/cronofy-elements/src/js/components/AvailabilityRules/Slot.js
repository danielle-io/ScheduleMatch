import React, { useContext } from "react";
import { css, jsx } from "@emotion/core";
import moment from "moment-timezone";
import { transparentize } from "polished";

import { ExtrasContext, I18nContext, ThemeContext } from "./AvailabilityRules";
import { DragContext } from "./Week";

import ToggleIcon from "./ToggleIcon";
import Tooltip from "./Tooltip";

import { buttonReset } from "../../styles/utils";
import { connectSlots } from "../../helpers/slots.rules";

const Slot = ({ slot, toggleMultiple, first }) => {
    const [extras, setExtras] = useContext(ExtrasContext);
    const i18n = useContext(I18nContext);
    const [theme, setTheme] = useContext(ThemeContext);
    const [drag, setDrag] = useContext(DragContext);

    const hoverBG = drag.mouseDown
        ? transparentize(1, theme.colors.black)
        : transparentize(0.8, theme.colors.black);

    const isDragged = drag.dragged.includes(slot.id);

    let normalBG = "none";
    if (isDragged) {
        normalBG =
            drag.toggleState === "available"
                ? theme.colors.availableActive
                : theme.colors.unavailableActive;
    }

    const startTime = moment(slot.start, "HH:mm");
    const startTimeString = i18n.f(startTime, "LT").replace(" ", "");

    const endTime = moment(slot.end, "HH:mm");
    const endTimeString = i18n.f(endTime, "LT").replace(" ", "");

    const timeString = `${startTimeString} - ${endTimeString}`;

    const cursor = drag.mouseDown ? "row-resize" : "pointer";

    const handleMouseDown = () => {
        const toggleState = slot.available ? "unavailable" : "available";
        setDrag({
            mouseDown: true,
            toggleState,
            dragged: [slot.id],
            dragStart: slot.id
        });
    };

    const handleMouseEnter = () => {
        if (drag.mouseDown) {
            const dragged = connectSlots(drag.dragStart, slot.id);

            setDrag({
                ...drag,
                dragged
            });
        }
    };

    const handleMouseUp = () => {
        toggleMultiple(drag.dragged, drag.toggleState);
        setDrag({
            mouseDown: false,
            toggleState: "available",
            dragged: [],
            dragStart: false
        });
    };

    return (
        <div
            css={css`
                display: block;
                height: ${extras.slotHeight.height}px;
                background: ${normalBG};
                transition: background 0.2s;
            `}
            className={`${theme.prefix}__slot ${theme.prefix}__slot--${
                slot.available ? "available" : "unavailable"
            } ${isDragged ? `${theme.prefix}__slot--dragging` : ""}`}
        >
            <button
                type="button"
                css={css`
                    ${buttonReset};
                    height: 100%;
                    width: 100%;
                    display: block;
                    cursor: ${cursor};
                    position: relative;
                    user-select: none;
                    &:hover {
                        background: ${hoverBG};
                        .${theme.prefix}__slot-tooltip {
                            opacity: 1;
                        }
                        .${theme.prefix}__status-icon {
                            opacity: 1;
                        }
                    }
                `}
                className={`${theme.prefix}__slot-button`}
                onMouseDown={handleMouseDown}
                onMouseEnter={handleMouseEnter}
                onMouseUp={handleMouseUp}
            >
                {!drag.mouseDown ? (
                    <React.Fragment>
                        <Tooltip time={timeString} top={first} />
                        <ToggleIcon available={slot.available} />
                    </React.Fragment>
                ) : null}
                <span className="visuallyhidden">{i18n.t("toggle_slot")}</span>
            </button>
        </div>
    );
};

export default Slot;
