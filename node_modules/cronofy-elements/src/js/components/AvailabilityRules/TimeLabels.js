import React, { useState, useContext } from "react";
import moment from "moment-timezone";
import { css, jsx } from "@emotion/core";

import {
    ExtrasContext,
    I18nContext,
    ThemeContext,
    StaticSlotsContext,
    StatusContext
} from "./AvailabilityRules";
import TimeSelector from "./TimeSelector";

const TimeLabel = ({ slot, height, open }) => {
    const i18n = useContext(I18nContext);
    const [status, setStatus] = useContext(StatusContext);
    const [theme, setTheme] = useContext(ThemeContext);
    const timeObject = moment(slot.start, "HH:mm");
    const isOnTheHour = timeObject.minute() === 0;
    const timeString = i18n.f(timeObject, "LT").replace(" ", "");
    return (
        <div
            css={css`
                height: ${height}px;
                line-height: 1;
                text-align: right;
                font-size: 12px;
                text-transform: lowercase;
                @media (max-width: 550px) {
                    text-align: left;
                    opacity: 0.6;
                    padding-top: 2px;
                    padding-left: 2px;
                    user-select: none;
                    pointer-events: none;
                }
            `}
            className={`${theme.prefix}__label--time`}
            onClick={() => open()}
        >
            {isOnTheHour ? timeString : null}
        </div>
    );
};

const TimeLabels = () => {
    const staticSlots = useContext(StaticSlotsContext);
    const [selectionVisibility, setSelectionVisibility] = useState(false);
    const [extras, setExtras] = useContext(ExtrasContext);
    const [theme, setTheme] = useContext(ThemeContext);

    const handleCalendarSelection = () => {
        setSelectionVisibility(!selectionVisibility);
    };

    return (
        <React.Fragment>
            {selectionVisibility ? (
                <TimeSelector done={handleCalendarSelection} />
            ) : null}

            <div
                css={css`
                    position: relative;
                    width: ${theme.sizes.labelWidth}px;
                    flex-shrink: 1;
                    padding-right: 4px;
                    @media (max-width: 550px) {
                        position: absolute;
                        top: 0;
                        left: 0;
                        z-index: 2;
                    }
                `}
                className={`${theme.prefix}__label-column`}
            >
                <div
                    css={css`
                        position: absolute;
                        bottom: 100%;
                        right: 0;
                        width: 20px;
                        height: 20px;
                        transform: translate(-10px, -10px);
                        cursor: pointer;
                        @media (max-width: 550px) {
                            left: 0;
                            transform: translate(0, -40px);
                        }
                    `}
                    onClick={handleCalendarSelection}
                    className={`${theme.prefix}__time-select__trigger`}
                >
                    <svg
                        width="20"
                        height="20"
                        xmlns="http://www.w3.org/2000/svg"
                        className={`${theme.prefix}__time-select__trigger-icon`}
                    >
                        <path
                            d="M3.94 6.5L2.22 3.64l1.42-1.42L6.5 3.94c.52-.3 1.1-.54 1.7-.7L9 0h2l.8 3.24c.6.16 1.18.4 1.7.7l2.86-1.72 1.42 1.42-1.72 2.86c.3.52.54 1.1.7 1.7L20 9v2l-3.24.8c-.16.6-.4 1.18-.7 1.7l1.72 2.86-1.42 1.42-2.86-1.72c-.52.3-1.1.54-1.7.7L11 20H9l-.8-3.24c-.6-.16-1.18-.4-1.7-.7l-2.86 1.72-1.42-1.42 1.72-2.86c-.3-.52-.54-1.1-.7-1.7L0 11V9l3.24-.8c.16-.6.4-1.18.7-1.7zM10 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"
                            fill={theme.colors.hairline}
                        />
                    </svg>
                </div>
                {staticSlots.map(slot => (
                    <TimeLabel
                        key={`${slot.day}_${slot.start}`}
                        slot={slot}
                        height={extras.slotHeight.height}
                        open={handleCalendarSelection}
                    />
                ))}
            </div>
        </React.Fragment>
    );
};

export default TimeLabels;
