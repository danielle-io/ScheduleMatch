import React, { useContext, useEffect, useState } from "react";
import { useWindowSize } from "../../hooks/useWindowSize";
import { css, jsx } from "@emotion/core";

import {
    ExtrasContext,
    StatusContext,
    ThemeContext
} from "./AvailabilityRules";

import DayLabels from "./DayLabels";
import TimeLabels from "./TimeLabels";
import Loading from "./Loading";
import Slots from "./Slots";
import SlotsDisplay from "./SlotsDisplay";
import WeekGrid from "./WeekGrid";

export const DragContext = React.createContext();

const Week = () => {
    const [theme, setTheme] = useContext(ThemeContext);
    const [extras, setExtras] = useContext(ExtrasContext);
    const [status, setStatus] = useContext(StatusContext);

    const [drag, setDrag] = useState({
        mouseDown: false,
        toggleState: "available",
        dragged: [],
        dragStart: false
    });

    const gridWrapper = React.createRef();

    const size = useWindowSize();

    const calculateColumnWidth = () => {
        const gridWrapperWidth = gridWrapper.current.clientWidth;
        if (gridWrapperWidth) {
            const columnWidth = Math.floor(gridWrapperWidth / 7);
            if (columnWidth != theme.sizes.columnWidth) {
                setTheme({ ...theme, sizes: { ...theme.sizes, columnWidth } });
            }
        }
    };

    useEffect(() => {
        calculateColumnWidth();
    }, []);

    useEffect(() => {
        calculateColumnWidth();
    }, [size]);

    return (
        <DragContext.Provider value={[drag, setDrag]}>
            <DayLabels />
            <div
                css={css`
                    position: relative;
                    z-index: 1;
                    width: 100%;
                    display: flex;
                    display: flex;
                    margin: 0;
                    padding: 0;
                    width: 100%;
                    align-content: stretch;
                `}
                className={`${theme.prefix}__wrapper`}
            >
                <TimeLabels />
                <div
                    ref={gridWrapper}
                    css={css`
                        position: relative;
                        width: 100%;
                        height: ${extras.slotHeight.height *
                            extras.limits.slotsPerDay}px;
                    `}
                    className={`${theme.prefix}__grid`}
                >
                    {!status.loading ? <SlotsDisplay /> : null}
                    <WeekGrid
                        key={`${extras.limits.start}_${extras.limits.end}`}
                    />
                    {status.loading ? <Loading /> : <Slots />}
                </div>
            </div>
        </DragContext.Provider>
    );
};

export default Week;
