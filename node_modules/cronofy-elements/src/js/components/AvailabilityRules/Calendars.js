import React, { useState, useContext } from "react";
import { css, jsx } from "@emotion/core";

import {
    CalendarContext,
    ThemeContext,
    I18nContext
} from "./AvailabilityRules";
import AddButton from "./AddButton";
import Calendar from "./Calendar";
import UnknownCalendar from "./UnknownCalendar";
import CalendarSelector from "./CalendarSelector";
import LoadingSpinner from "../generic/LoadingSpinner";

const Calendars = ({ loading }) => {
    const [selectionVisibility, setSelectionVisibility] = useState(false);
    const [calendars, setCalendars] = useContext(CalendarContext);
    const i18n = useContext(I18nContext);
    const [theme, setTheme] = useContext(ThemeContext);

    const addCalendars = (id = false) => {
        if (id) {
            // console.log("adding calendar", id);
            const alreadyExists = calendars.active.includes(id);
            if (alreadyExists) return;

            const targetCal = calendars.all.find(cal => cal.id === id);
            setCalendars({
                active: [...calendars.active, targetCal.id],
                all: calendars.all
            });
        } else {
            // console.log("adding all calendars");
            setCalendars({
                ...calendars,
                active: calendars.all.map(cal => cal.id)
            });
        }
    };

    const removeCalendars = (id = false) => {
        if (id) {
            // console.log("removing calendar", id);
            const filteredCals = calendars.active.filter(cal => cal !== id);
            setCalendars({
                ...calendars,
                active: filteredCals
            });
        } else {
            // console.log("removing all calendars");
            setCalendars({ ...calendars, active: [] });
        }
    };

    const handleCalendarSelection = () => {
        setSelectionVisibility(!selectionVisibility);
    };

    const showCalendars = calendars.active.length > 0;

    const calendarsMarkup = showCalendars ? (
        calendars.active.map(calendarId => {
            const calendar = calendars.all.find(cal => cal.id === calendarId);
            if (calendar) {
                return (
                    <Calendar
                        key={`${calendar.id}-calendar`}
                        calendar={calendar}
                        remove={removeCalendars}
                    />
                );
            } else {
                return (
                    <UnknownCalendar
                        key={`${calendarId}-calendar`}
                        id={calendarId}
                        remove={removeCalendars}
                    />
                );
            }
        })
    ) : (
        <Calendar calendar={{ name: `All` }} remove={false} />
    );

    return (
        <div
            css={css`
                z-index: 2;
                position: relative;
                width: 100%;
                display: flex;
                align-items: center;
                margin-bottom: 20px;
                @media (max-width: 550px) {
                    flex-wrap: wrap;
                }
            `}
            className={`${theme.prefix}__calendars`}
        >
            <span
                css={css`
                    margin-right: 4px;
                    width: 12em;
                    @media (max-width: 550px) {
                        margin-bottom: 10px;
                    }
                `}
                className={`${theme.prefix}__calendars__title`}
            >
                {i18n.t("included_calendars")}
            </span>
            <div
                css={css`
                    width: 100%;
                    display: flex;
                    flex-wrap: wrap;
                    border: 1px solid ${theme.colors.hairline};
                    background: ${theme.colors.white};
                    border-radius: 4px;
                    align-items: center;
                    padding: 5px 5px 0 5px;
                    position: relative;
                `}
                className={`${theme.prefix}__calendars__selector`}
            >
                {loading ? (
                    <LoadingSpinner color={theme.colors.black} />
                ) : (
                    <React.Fragment>
                        {calendarsMarkup}
                        {calendars.all.length > 0 &&
                        calendars.active.length < calendars.all.length ? (
                            <AddButton callback={handleCalendarSelection} />
                        ) : null}
                    </React.Fragment>
                )}
                {selectionVisibility ? (
                    <CalendarSelector
                        calendars={calendars}
                        done={handleCalendarSelection}
                        remove={removeCalendars}
                        add={addCalendars}
                    />
                ) : null}
            </div>
        </div>
    );
};

export default Calendars;
