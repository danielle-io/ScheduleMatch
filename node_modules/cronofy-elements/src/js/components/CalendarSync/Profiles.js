import React, { useContext } from "react";
import { css, jsx } from "@emotion/core";

import LoadingSpinner from "../generic/LoadingSpinner";
import ProviderLogo from "./ProviderLogo";
import ProfileStatus from "./ProfileStatus";
import RemoveLink from "./RemoveLink";
import { OptionsContext, ProfilesContext, ThemeContext, StatusContext } from "./CalendarSync";
import { revokeProfile } from "../../helpers/connections";

const Profiles = ({ loading }) => {
    const options = useContext(OptionsContext);
    const [profiles, setProfiles] = useContext(ProfilesContext);
    const theme = useContext(ThemeContext);
    const [status, setStatus] = useContext(StatusContext);

    const removeProfile = (profile) => {
        return revokeProfile(
            options.token,
            options.domains.apiDomain,
            profile.profile_id,
            "calendar-sync",
            options.demo
        )
            .then(res => {
                const callback = { "type": "profile_revoked", "profile": profile };
                setStatus({ ...status, reload: true, pendingNotification: callback });
                return res;
            })
    };

    const profilesList = profiles.map((profile, i) => (
        <div
            key={`${i}_${profile.profile_id}`}
            css={css`
                display: flex;
                align-items: center;
                height: 44px;
                background: ${theme.colors.white};
                &:nth-of-type(2n) {
                    background: ${theme.colors.greyPale};
                }
                @media (max-width: 380px) {
                    flex-wrap: wrap;
                    height: auto;
                    padding-top: 10px;
                    padding-bottom: 10px;
                }
            `}
            className={`${theme.prefix}__profile`}
        >
            {status.editing ? (
                <RemoveLink
                    name={profile.provider_name}
                    removeProfile={() => removeProfile(profile)}
                />
            ) : (
                <ProviderLogo provider={profile.provider_name} size={20} />
            )}
            <span
                css={css`
                    flex-grow: 1;
                `}
                className={`${theme.prefix}__profile-name`}
            >
                {profile.profile_name}
            </span>
            <ProfileStatus
                connected={profile.profile_connected}
                syncRequired={profile.profile_initial_sync_required}
                relinkUrl={profile.profile_relink_url}
            />
        </div>
    ));

    return (
        <div
            css={css`
                border-bottom: 1px solid ${theme.colors.hairline};
                margin-bottom: 10px;
                li {
                    padding: 10px;
                    margin: 0;
                }
            `}
            className={`${theme.prefix}__profiles`}
        >
            {!loading ? (
                profilesList
            ) : (
                <div
                    css={css`
                        display: flex;
                        justify-content: center;
                    `}
                    className={`${theme.prefix}__loading-wrapper`}
                >
                    <LoadingSpinner color={theme.colors.black} />
                </div>
            )}
        </div>
    );
};

export default Profiles;
