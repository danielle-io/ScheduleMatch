import React, { useState, useContext } from "react";
import { css, jsx } from "@emotion/core";

import {
    LoggingContext,
    I18nContext,
    OptionsContext,
    StatusContext,
    ThemeContext
} from "./CalendarSync";
import LoadingSpinner from "../generic/LoadingSpinner";

import { buttonReset } from "../../styles/utils";

const RemoveLink = ({ name, removeProfile }) => {
    const [profileStatus, setProfileStatus] = useState({
        loading: false,
        error: false
    });
    const log = useContext(LoggingContext);
    const i18n = useContext(I18nContext);
    const options = useContext(OptionsContext);
    const [status, setStatus] = useContext(StatusContext);
    const theme = useContext(ThemeContext);

    const handleLinkClick = () => {
        setProfileStatus({ ...status, loading: true });

        if (options.demo) {
            log.warn("Not removing profile because we're running in demo mode");
            setTimeout(
                () => setProfileStatus({ ...status, loading: false }),
                1000
            );
        } else {
            removeProfile()
                .then(res => {
                    if (res.status === 202) {
                        setProfileStatus({ loading: false, error: false });
                    } else {
                        setProfileStatus({ loading: false, error: true });
                    }
                })
                .catch(error => {
                    log.error("Error revoking profile", {
                        errorObject: error.message
                    });
                    setProfileStatus({ loading: false, error });
                    return error;
                });
        }
    };

    return (
        <React.Fragment>
            {profileStatus.loading ? (
                <LoadingSpinner size={30} color={theme.colors.greyMid} />
            ) : (
                <button
                    type="button"
                    css={css`
                        ${buttonReset};
                        padding: 0;
                        display: flex;
                        cursor: pointer;
                        align-items: center;
                        justify-content: center;
                        width: 20px;
                        height 20px;
                        margin-right: 10px;
                    `}
                    className={`${theme.prefix}__remove`}
                    onClick={handleLinkClick}
                >
                    <span className="visuallyhidden">
                        {i18n.t("remove")} {name}
                    </span>
                    <svg
                        css={css`
                            width: 10px;
                            height: 10px;
                            fill: ${theme.colors.greyMid};
                        `}
                        className={`${theme.prefix}__remove-icon`}
                        viewBox="0 0 9 9"
                    >
                        <path d="M4.5 3.342L7.67.172c.264-.264.737-.22 1.057.1.32.32.365.794.1 1.058L5.659 4.5l3.17 3.17c.264.264.22.737-.1 1.057-.32.32-.794.365-1.058.1L4.5 5.659l-3.17 3.17c-.264.264-.737.22-1.057-.1-.32-.32-.365-.794-.1-1.058L3.341 4.5.172 1.33c-.264-.264-.22-.737.1-1.057.32-.32.794-.365 1.058-.1L4.5 3.341z" />
                    </svg>
                </button>
            )}
        </React.Fragment>
    );
};

export default RemoveLink;
