import React, { useState, useEffect } from "react";
import { css, jsx } from "@emotion/core";

import * as connections from "../../helpers/connections";
import { parseStyleOptions } from "../../helpers/theming";
import {
    setupProviderData,
    parseAuthOptions
} from "../../helpers/utils.CalendarSync";
import { i18nConstructor } from "../../helpers/i18n";
import { logConstructor } from "../../helpers/logging";

import Container from "../generic/Container";
import Error from "../generic/Error";
import Footer from "./Footer";
import Profiles from "./Profiles";
import SelectProvider from "./SelectProvider";
import LoadingSpinner from "../generic/LoadingSpinner";

export const AuthContext = React.createContext();
export const LoggingContext = React.createContext();
export const I18nContext = React.createContext();
export const OptionsContext = React.createContext();
export const ProfilesContext = React.createContext();
export const ProvidersContext = React.createContext();
export const ThemeContext = React.createContext();
export const StatusContext = React.createContext();

const CalendarSync = ({ options }) => {
    const [log, setLog] = useState(
        logConstructor(options.config.logs, "Calendar Sync")
    );

    const [status, setStatus] = useState({
        adding: false,
        demo: options.demo || false,
        editing: false,
        error: false,
        loading: true,
        locale: options.locale,
        pendingNotification: null,
        reload: true, // trigger "reload" on first load
        singleProfile: options.single_profile
    });
    const [i18n, setI18n] = useState(
        i18nConstructor("calendar_sync", options.locale, options.translations)
    );
    const [authUrl, setAuthUrl] = useState(options.authorization_url || false);
    const [auth, setAuth] = useState(parseAuthOptions(options.authorization));
    const [providers, setProviders] = useState(
        setupProviderData(
            auth,
            options.domains.appDomain,
            authUrl,
            status.singleProfile
        )
    );
    const [profiles, setProfiles] = useState([]);
    const [theme, setTheme] = useState({
        ...parseStyleOptions(options.styles, "AvailabilityViewer"),
        sizes: {
            labelWidth: 60
        }
    });

    const sendCallback = res => {
        if (status.pendingNotification !== null) {
            if (typeof options.callback === "function") {
                options.callback({
                    notification: status.pendingNotification,
                    userinfo: res
                });
            }

            setStatus({ ...status, pendingNotification: null });
        }
    };

    useEffect(() => {
        if (status.reload === false) {
            return;
        }

        if (options.token) {
            connections
                .getUserInfo(
                    options.token,
                    options.domains.apiDomain,
                    options.demo
                )
                .then(res => {
                    sendCallback(res);

                    if (res["cronofy.data"]) {
                        setProfiles(res["cronofy.data"].profiles);
                    } else {
                        log.warn("No profiles found");
                    }

                    setStatus({
                        ...status,
                        loading: false,
                        reload: false
                    });
                })
                .catch(error => {
                    const errorMessage = error.message ? error.message : error;
                    const errorOutput = {};
                    if (error.docsSlug) {
                        errorOutput.docsSlug = error.docsSlug;
                    }
                    log.error(errorMessage, errorOutput);
                    setStatus({
                        ...status,
                        loading: false,
                        error: error,
                        reload: false
                    });
                });
        } else {
            sendCallback(null);

            setStatus({
                ...status,
                loading: false,
                reload: false
            });
        }
    }, [status.reload]);

    return (
        <Container
            height={"auto"}
            minHeight={"0"}
            css={css`
                max-width: 100%;
                margin-bottom: 10px;
                min-height: 100px;

                // Reset
                a {
                    color: inherit;
                }
                ul,
                ol,
                li {
                    margin: 0;
                    padding: 0;
                }
            `}
            className={`${theme.prefix}`}
        >
            {status.error ? (
                <Error message={i18n.t("global_error")} theme={theme} />
            ) : (
                <LoggingContext.Provider value={log}>
                    <I18nContext.Provider value={i18n}>
                        <ThemeContext.Provider value={theme}>
                            <StatusContext.Provider value={[status, setStatus]}>
                                <span
                                    css={css`
                                        margin-top: 10px;
                                        padding-bottom: 6px;
                                        font-weight: bold;
                                        border-bottom: 1px solid
                                            ${theme.colors.hairline};
                                    `}
                                    className={`${theme.prefix}__title`}
                                >
                                    {i18n.t("calendar_accounts")}
                                </span>
                                {status.loading ? (
                                    <div
                                        css={css`
                                            display: flex;
                                            justify-content: center;
                                            align-items: center;
                                        `}
                                    >
                                        <LoadingSpinner />
                                    </div>
                                ) : (
                                    <React.Fragment>
                                        {profiles.length ? (
                                            <React.Fragment>
                                                {status.adding ? (
                                                    <ProvidersContext.Provider
                                                        value={providers}
                                                    >
                                                        <AuthContext.Provider
                                                            value={auth}
                                                        >
                                                            <SelectProvider
                                                                message={`${i18n.t(
                                                                    "select_provider"
                                                                )}:`}
                                                            />
                                                        </AuthContext.Provider>
                                                    </ProvidersContext.Provider>
                                                ) : (
                                                    <ProfilesContext.Provider
                                                        value={[
                                                            profiles,
                                                            setProfiles
                                                        ]}
                                                    >
                                                        <OptionsContext.Provider
                                                            value={options}
                                                        >
                                                            <Profiles
                                                                loading={
                                                                    status.loading
                                                                }
                                                            />
                                                        </OptionsContext.Provider>
                                                    </ProfilesContext.Provider>
                                                )}
                                                <Footer />
                                            </React.Fragment>
                                        ) : (
                                            <ProvidersContext.Provider
                                                value={providers}
                                            >
                                                <AuthContext.Provider
                                                    value={auth}
                                                >
                                                    <SelectProvider
                                                        message={`${i18n.t(
                                                            "select_provider_to_add_first_account"
                                                        )}:`}
                                                    />
                                                </AuthContext.Provider>
                                            </ProvidersContext.Provider>
                                        )}
                                    </React.Fragment>
                                )}
                            </StatusContext.Provider>
                        </ThemeContext.Provider>
                    </I18nContext.Provider>
                </LoggingContext.Provider>
            )}
        </Container>
    );
};

export default CalendarSync;
