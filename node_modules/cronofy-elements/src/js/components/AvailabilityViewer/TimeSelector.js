import React, { useContext } from "react";
import { css, jsx } from "@emotion/core";
import { transparentize } from "polished";
import moment from "moment-timezone";

import {
    I18nContext,
    LimitsContext,
    StatusContext,
    ThemeContext
} from "./AvailabilityViewer";

import { buttonReset } from "../../styles/utils";

const timeOptions = [
    "00:00",
    "01:00",
    "02:00",
    "03:00",
    "04:00",
    "05:00",
    "06:00",
    "07:00",
    "08:00",
    "09:00",
    "10:00",
    "11:00",
    "12:00",
    "13:00",
    "14:00",
    "15:00",
    "16:00",
    "17:00",
    "18:00",
    "19:00",
    "20:00",
    "21:00",
    "22:00",
    "23:00",
    "24:00"
];

const TimeSelector = ({ done }) => {
    const [status, setStatus] = useContext(StatusContext);
    const i18n = useContext(I18nContext);
    const [theme, setTheme] = useContext(ThemeContext);
    const [limits, setLimits] = useContext(LimitsContext);

    const handleStartChange = e => {
        setLimits({
            ...limits,
            start: e.target.value
        });
        done();
    };

    const handleEndChange = e => {
        setLimits({
            ...limits,
            end: e.target.value
        });
        done();
    };

    const startOptions = timeOptions
        .filter(time => {
            const localEnd = limits.end;
            const end = localEnd === "00:00" ? "24:00" : localEnd;
            return parseInt(time, 10) < parseInt(end, 10);
        })
        .map(time => {
            return (
                <option key={`start_${time}`} value={time}>
                    {i18n
                        .f(moment.tz(time, "HH:mm", status.tzid), "LT")
                        .replace(" ", "")}
                </option>
            );
        });

    const endOptions = timeOptions
        .filter(time => {
            const localStart = limits.start;
            const start = localStart === "00:00" ? "00:01" : localStart;
            return parseInt(time, 10) > parseInt(start, 10);
        })
        .map(time => (
            <option key={`end_${time}`} value={time}>
                {i18n
                    .f(moment.tz(time, "HH:mm", status.tzid), "LT")
                    .replace(" ", "")}
            </option>
        ));

    return (
        <div
            css={css`
                position: absolute;
                top: 20px;
                left: 10px;
                background: ${theme.colors.white};
                border: 1px solid ${theme.colors.hairline};
                border-radius: 4px;
                box-shadow: ${transparentize(0.8, theme.colors.black)} 0 1px 3px
                    0;
                padding: 30px 20px 10px 10px;
                z-index: 4;
            `}
            className={`${theme.prefix}__time-select`}
        >
            <button
                type="button"
                css={css`
                    ${buttonReset};
                    position: absolute;
                    top: 7px;
                    right: 7px;
                    width: 12px;
                    height: 12px;
                `}
                onClick={done}
                className={`${theme.prefix}__time-select__close-button`}
            >
                <svg
                    css={css`
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        width: 12px;
                        height: 12px;
                        display: block;
                    `}
                    className={`${theme.prefix}__time-select__close-button-icon`}
                    viewBox="0 0 7 6"
                >
                    <path
                        fill={theme.colors.black}
                        d="M3.5 2.287L5.451.336c.163-.163.455-.135.651.062.197.196.225.488.062.65L4.213 3l1.951 1.951c.163.163.135.455-.062.651-.196.197-.488.225-.65.062L3.5 3.713 1.549 5.664c-.163.163-.455.135-.651-.062-.197-.196-.225-.488-.062-.65L2.787 3 .836 1.049C.673.886.7.594.898.398c.196-.197.488-.225.65-.062L3.5 2.287z"
                    />
                </svg>
                <span className="visuallyhidden">{i18n.t("close")}</span>
            </button>
            <div
                css={css`
                    display: flex;
                    align-items: center;
                    margin-bottom: 20px;
                    justify-content: stretch;
                `}
                className={`${theme.prefix}__time-select__row`}
            >
                <span
                    css={css`
                        width: 40px;
                        margin-right: 10px;
                        flex-shrink: 0;
                    `}
                    className={`${theme.prefix}__time-select__label`}
                >
                    {i18n.t("start")}
                </span>
                <div
                    css={css`
                        border: 1px solid ${theme.colors.hairline};
                        border-radius: 4px;
                        padding: 6px;
                        display: block;
                        background: ${theme.colors.white};
                        height: 32px;
                        line-height: 1;
                        position: relative;
                        overflow: hidden;
                        width: 100%;
                        min-width: 60px;
                    `}
                    className={`${theme.prefix}__time-select__select-wrapper`}
                >
                    <select
                        css={css`
                            color: ${theme.colors.black};
                            display: block;
                            font-size: 16px;
                            padding: 0.5em;
                            cursor: pointer;
                            line-height: 1;
                            background: transparent;
                            border-radius: 0;
                            border: 0;
                            position: absolute;
                            appearance: none;
                            top: -2px;
                            width: 120%;
                            right: -20%;
                            &:focus {
                                outline: none;
                            }
                        `}
                        name=""
                        id=""
                        onChange={e => handleStartChange(e)}
                        value={limits.start}
                        className={`${theme.prefix}__time-select__select`}
                    >
                        {startOptions}
                    </select>
                </div>
            </div>
            <div
                css={css`
                    display: flex;
                    align-items: center;
                    margin-bottom: 20px;
                    justify-content: stretch;
                `}
                className={`${theme.prefix}__time-select__row`}
            >
                <span
                    css={css`
                        width: 40px;
                        margin-right: 10px;
                        flex-shrink: 0;
                    `}
                    className={`${theme.prefix}__time-select__label`}
                >
                    {i18n.t("end")}
                </span>
                <div
                    css={css`
                        border: 1px solid ${theme.colors.hairline};
                        border-radius: 4px;
                        padding: 6px;
                        display: block;
                        background: ${theme.colors.white};
                        height: 32px;
                        line-height: 1;
                        position: relative;
                        overflow: hidden;
                        width: 100%;
                        min-width: 120px;
                    `}
                    className={`${theme.prefix}__time-select__select-wrapper`}
                >
                    <select
                        css={css`
                            color: ${theme.colors.black};
                            display: block;
                            font-size: 16px;
                            padding: 0.5em;
                            cursor: pointer;
                            line-height: 1;
                            background: transparent;
                            border-radius: 0;
                            border: 0;
                            position: absolute;
                            top: -2px;
                            width: 120%;
                            right: -20%;
                            appearance: none;
                            &:focus {
                                outline: none;
                            }
                        `}
                        name=""
                        id=""
                        onChange={e => handleEndChange(e)}
                        value={limits.end === "00:00" ? "24:00" : limits.end}
                        className={`${theme.prefix}__time-select__select`}
                    >
                        {endOptions}
                    </select>
                </div>
            </div>
        </div>
    );
};

export default TimeSelector;
