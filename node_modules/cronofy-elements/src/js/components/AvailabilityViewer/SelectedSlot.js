import React, { useContext } from "react";
import moment from "moment-timezone";
import { css, jsx } from "@emotion/core";
import { darken, transparentize } from "polished";

import Tooltip from "./Tooltip";

import { filterObject } from "../../helpers/utils";
import { createExportableSelection } from "../../helpers/utils.AvailabilityViewer";
import { buttonReset } from "../../styles/utils";

import { I18nContext, ThemeContext, StatusContext } from "./AvailabilityViewer";
import { SelectionContext } from "./Week";

const SelectedSlot = ({ slotDetails }) => {
    const slot = slotDetails.slot;
    const [theme, setTheme] = useContext(ThemeContext);
    const [status, setStatus] = useContext(StatusContext);
    const [selectedSlots, setSelectedSlots] = useContext(SelectionContext);
    const i18n = useContext(I18nContext);

    const startObject = moment.tz(
        slot.start,
        "YYYY-MM-DDTTHH:mm:00Z",
        status.tzid
    );
    const endObject = moment.tz(slot.end, "YYYY-MM-DDTTHH:mm:00Z", status.tzid);

    const startDisplay = i18n.f(startObject, "LT").replace(" ", "");
    const endDisplay = i18n.f(endObject, "LT").replace(" ", "");
    const timeDisplay = `${startDisplay} - ${endDisplay}`;

    const removeFromSelectionList = () => {
        const filteredSlots = filterObject(slot.start, selectedSlots);
        setSelectedSlots(filteredSlots);
        const exportableSelection = createExportableSelection(filteredSlots);
        const callbackContent = {
            notification: {
                type: "slot_removed",
                slot
            },
            slots: exportableSelection
        };
        status.selectionConfirm(callbackContent);
    };

    return (
        <div
            css={css`
                width: 100%;
                height: 100%;
                flex-grow: 1;
                position: relative;
                background: ${theme.colors.availableActive};
                border: 1px solid ${darken(0.05, theme.colors.availableActive)};
                box-shadow: ${transparentize(0.9, theme.colors.black)} 0 5px 5px -2px;
                &:hover .${theme.prefix}__slot-tooltip {
                    opacity: 1;
                }
                z-index: 1;
            `}
            className={`${theme.prefix}__selected-slot`}
        >
            {!status.multiSelect && status.mode !== "no_confirm" ? (
                <Tooltip
                    time={timeDisplay}
                    top={slotDetails.topSlot}
                    hover={true}
                />
            ) : null}

            <button
                type="button"
                css={css`
                    ${buttonReset};
                    background: ${theme.colors.availableActive};
                    width: 100%;
                    height: 100%;
                    cursor: pointer;
                    color: ${theme.colors.white};
                `}
                className={`${theme.prefix}__selected-slot__button`}
                onClick={() =>
                    status.multiSelect
                        ? removeFromSelectionList()
                        : status.selectionConfirm({
                              notification: {
                                  type: "slot_selected",
                                  slot: slot
                              }
                          })
                }
            >
                {status.mode === "multi_select" || status.mode === "no_confirm"
                    ? startDisplay
                    : i18n.t("confirm")}
            </button>
        </div>
    );
};

export default SelectedSlot;
