import React, { useState, useEffect } from "react";
import moment from "moment";
import { css, jsx } from "@emotion/core";

import * as connections from "../../helpers/connections";
import {
    generateDummySlots,
    getSlotsForWeek,
    calculateSlotHeight,
    parseInterval
} from "../../helpers/slots";
import { objectIsEmpty, uniqueItems } from "../../helpers/utils";
import {
    addKeysToSlots,
    cropQuery,
    generateWeeklySlots,
    generateStaticWeeks
} from "../../helpers/utils.AvailabilityViewer";
import { parseStyleOptions } from "../../helpers/theming";
import { i18nConstructor } from "../../helpers/i18n";
import { logConstructor } from "../../helpers/logging";

import Footer from "./Footer";
import WeekWrapper from "./WeekWrapper";

import Container from "../generic/Container";

export const LoggingContext = React.createContext();
export const I18nContext = React.createContext();
export const LimitsContext = React.createContext();
export const MasterSlotsContext = React.createContext();
export const SlotsContext = React.createContext();
export const StatusContext = React.createContext();
export const ThemeContext = React.createContext();
export const WeeksContext = React.createContext();

const AvailabilityViewer = ({ options, error }) => {
    const [log, setLog] = useState(
        logConstructor(options.config.logs, "Availability Viewer")
    );

    const [theme, setTheme] = useState({
        ...parseStyleOptions(
            { ...options.styles },
            "CronofyAvailabilityViewer"
        ),
        slotHeightCalc: calculateSlotHeight({
            duration: options.query.required_duration
                ? options.query.required_duration.minutes
                : 60,
            interval: parseInterval(options.config.interval)
        }),
        sizes: {
            labelWidth: 60,
            columnWidth: 100
        }
    });

    const [i18n, setI18n] = useState(
        i18nConstructor(
            "availability_viewer",
            options.locale,
            options.translations
        )
    );

    const [status, setStatus] = useState({
        customtzid: options.customtzid,
        error: false,
        loading: true,
        locale: options.locale,
        mode: options.config.mode,
        boundsControl: options.config.boundsControl,
        maxSelection: options.config.max_selection_count
            ? parseInt(options.config.max_selection_count)
            : false,
        multiSelect: options.config.mode === "multi_select" || false,
        preloading: false,
        selectionConfirm: options.callback
            ? options.callback
            : () => log.warn("No `callback` option has been provided"),
        slotSelection: options.config.slot_selection,
        tzid: options.tzid,
        weeksLoaded: [],
        startDay: options.config.startDay
    });

    const [rawData, setRawData] = useState([]);

    const [weeks, setWeeks] = useState({
        set: false,
        current: 1,
        days: [],
        total: 0
    });

    const [slotData, setSlotData] = useState(generateDummySlots());
    const [slotsForWeek, setSlotsForWeek] = useState(
        getSlotsForWeek(slotData, weeks.current)
    );

    const [limits, setLimits] = useState({
        duration: options.query ? options.query.required_duration.minutes : 60,
        start: options.config.start_time ? options.config.start_time : "09:00",
        end: options.config.end_time ? options.config.end_time : "17:30",
        interval: parseInterval(options.config.interval)
    });

    const triggerSlotsForWeek = () => {
        const slots = getSlotsForWeek(slotData, weeks.current);
        setSlotsForWeek(slots);
    };

    useEffect(() => {
        setWeeks(
            generateStaticWeeks(
                options.query.available_periods,
                options.config.startDay
            )
        );
    }, []);

    useEffect(() => {
        if (!weeks.set) return;
        triggerSlotsForWeek();

        if (!error) {
            const query = {
                ...options.query,
                response_format: "overlapping_slots",
                start_interval: { minutes: limits.interval }
            };

            const croppedQuery = cropQuery(query, {
                currentWeek: weeks.current,
                days: weeks.days,
                startTime: limits.start,
                endTime: limits.end,
                tzid: status.tzid
            });
            if (croppedQuery.available_periods.length > 0) {
                connections
                    .getAvailability(
                        options.token,
                        options.domains.apiDomain,
                        croppedQuery,
                        `AvailabilityViewer`,
                        status.tzid,
                        options.demo
                    )
                    .then(res => {
                        if (
                            typeof res.available_slots === "undefined" &&
                            typeof res.available_periods === "undefined"
                        ) {
                            throw {
                                type: 400,
                                message:
                                    "Check your `token`, `target`, and `query` params are correct. Full details can be found on the Cronofy Elements documention page: https://docs.cronofy.com/developers/ui-elements/"
                            };
                        }

                        const response =
                            query.response_format === "overlapping_slots"
                                ? res.available_slots
                                : res.available_periods;

                        const slotsWithKeys = addKeysToSlots(response);

                        setRawData({ ...rawData, ...slotsWithKeys });

                        const weeksLoaded = uniqueItems([
                            ...status.weeksLoaded,
                            weeks.current
                        ]);

                        setStatus({
                            ...status,
                            error: false,
                            loading: false,
                            preloading: false,
                            weeksLoaded
                        });
                    })
                    .catch(error => {
                        setStatus({
                            ...status,
                            error,
                            loading: false,
                            preloading: false
                        });

                        const errorMessage = error.message
                            ? error.message
                            : error;
                        const errorOutput = {};
                        if (error.docsSlug) {
                            errorOutput.docsSlug = error.docsSlug;
                        }
                        if (error.body) {
                            errorOutput.errorObject = error.body;
                        }
                        log.error(errorMessage, errorOutput);
                        return error;
                    });
            } else {
                // If we get here, the available_periods are not within the visible window
                log.info(
                    "The provided available_periods are not within the visible window"
                );
                setStatus({
                    ...status,
                    error: false,
                    loading: false,
                    preloading: false
                });
            }
        } else {
            setStatus({
                ...status,
                error: {
                    type: 400,
                    message:
                        "There was a problem with your initialization options."
                },
                loading: false
            });
        }
    }, [limits, weeks]);

    useEffect(() => {
        triggerSlotsForWeek();
    }, [slotData]);

    useEffect(() => {
        const slotHeightCalc = calculateSlotHeight(limits);
        setTheme({ ...theme, slotHeightCalc });
        if (!objectIsEmpty(rawData)) {
            setStatus({
                ...status,
                error: false,
                loading: false,
                preloading: true
            });
        }
    }, [limits]);

    useEffect(() => {
        if (!objectIsEmpty(rawData)) {
            const slots = generateWeeklySlots({
                availablePeriods: rawData,
                limits,
                weeks,
                tzid: status.tzid,
                unrestricted: status.slotSelection === "unrestricted"
            });
            setSlotData(slots.slots);
        }
    }, [limits, rawData]);

    return (
        <LoggingContext.Provider value={log}>
            <I18nContext.Provider value={i18n}>
                <ThemeContext.Provider value={[theme, setTheme]}>
                    <StatusContext.Provider value={[status, setStatus]}>
                        <MasterSlotsContext.Provider
                            value={[slotData, setSlotData]}
                        >
                            <SlotsContext.Provider value={slotsForWeek}>
                                <LimitsContext.Provider
                                    value={[limits, setLimits]}
                                >
                                    <Container
                                        height={"auto"}
                                        css={css`
                                            max-width: 100%;
                                            @media (max-width: 550px) {
                                                overflow: hidden;
                                            }
                                        `}
                                        className={`${theme.prefix}`}
                                    >
                                        <WeekWrapper />
                                        <WeeksContext.Provider
                                            value={[weeks, setWeeks]}
                                        >
                                            <Footer />
                                        </WeeksContext.Provider>
                                    </Container>
                                </LimitsContext.Provider>
                            </SlotsContext.Provider>
                        </MasterSlotsContext.Provider>
                    </StatusContext.Provider>
                </ThemeContext.Provider>
            </I18nContext.Provider>
        </LoggingContext.Provider>
    );
};

export default AvailabilityViewer;
