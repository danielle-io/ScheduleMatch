import React, { useContext, useState, useEffect } from "react";
import { useWindowSize } from "../../hooks/useWindowSize";
import { css, jsx } from "@emotion/core";

import DayColumn from "./DayColumn";
import DayColumnDisplay from "./DayColumnDisplay";
import Error from "../generic/Error";
import HoverSlot from "./HoverSlot";
import HoverTooltip from "./HoverTooltip";
import Loading from "./Loading";
import Preloading from "./Preloading";
import SelectedSlots from "./SelectedSlots";
import SelectionMask from "./SelectionMask";
import TimeLines from "./TimeLines";

import {
    I18nContext,
    LimitsContext,
    MasterSlotsContext,
    SlotsContext,
    StatusContext,
    ThemeContext
} from "./AvailabilityViewer";
import { checkBlockedSlots } from "../../helpers/utils.AvailabilityViewer";
import { objectIsEmpty } from "../../helpers/utils";

export const HoverContext = React.createContext();
export const SelectionContext = React.createContext();

const DayColumnWrapper = ({ children, layer = 1 }) => {
    const [theme, setTheme] = useContext(ThemeContext);
    return (
        <div
            css={css`
                display: flex;
                justify-content: stretch;
                position: absolute;
                z-index: ${layer};
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
            `}
            className={`${theme.prefix}__grid-columns`}
        >
            {children}
        </div>
    );
};

const Week = () => {
    const [limits, setLimits] = useContext(LimitsContext);
    const [slotData, setSlotData] = useContext(MasterSlotsContext);
    const slots = useContext(SlotsContext);
    const [status, setStatus] = useContext(StatusContext);
    const i18n = useContext(I18nContext);
    const [theme, setTheme] = useContext(ThemeContext);

    const [hover, setHover] = useState({
        times: false,
        position: { y: 0, x: 0 },
        visible: false,
        topSlot: false,
        available: false,
        hideTooltip: false,
        // If we setState on MouseOver for slots, the fans on a 2019 🍏 MBP will start to
        // spin (sounding like a helicopter). But *sometimes* we need this "realtime" mouse
        // position (i.e. when clearing a selection and reseting hover).
        helicopterMode: false
    });

    const [selectedSlots, setSelectedSlots] = useState({});

    const hoverElement = React.createRef();
    const hoverElementTooltip = React.createRef();
    const gridWrapper = React.createRef();

    useEffect(() => {
        if (
            status.mode === "multi_select" &&
            limits.duration / limits.interval !== 1
        ) {
            // If overlapping is a posibility, prevent overlapping by marking
            // the overlapped slots as `blocked`
            const blockedSlotData = checkBlockedSlots({
                slots: slotData,
                selected: selectedSlots,
                interval: limits.interval,
                duration: limits.duration
            });
            setSlotData(blockedSlotData);
        }

        if (objectIsEmpty(selectedSlots)) {
            hoverElement.current.style.display = "none";
            hoverElementTooltip.current.style.display = "none";
        }
    }, [selectedSlots]);

    useEffect(() => {
        hoverElement.current.style.display = "flex";
        hoverElement.current.style.opacity = hover.visible ? "1" : "0";

        hoverElementTooltip.current.style.display = "flex";
        hoverElementTooltip.current.style.opacity = hover.visible ? "1" : "0";
    }, [hover]);

    const tooltipText =
        hover.available || status.slotSelection === "unrestricted"
            ? hover.times
            : i18n.t("unavailable");

    const calculateColumnWidth = () => {
        const gridWrapperWidth = gridWrapper.current.clientWidth;
        if (gridWrapperWidth) {
            const columnWidth = Math.floor(gridWrapperWidth / 7);
            if (columnWidth != theme.sizes.columnWidth) {
                setTheme({ ...theme, sizes: { ...theme.sizes, columnWidth } });
            }
        }
    };

    useEffect(() => {
        calculateColumnWidth();
        if (!status.multiSelect) {
            setSelectedSlots({});
        }
    }, [slots]);
    useEffect(() => {
        setSelectedSlots({});
    }, [limits]);

    const size = useWindowSize();

    useEffect(() => {
        calculateColumnWidth();
    }, [size]);

    const hoverHeight =
        hover.available || status.slotSelection === "unrestricted"
            ? theme.slotHeightCalc.height * theme.slotHeightCalc.multiple
            : theme.slotHeightCalc.height;

    return (
        <HoverContext.Provider value={[hover, setHover]}>
            <SelectionContext.Provider
                value={[selectedSlots, setSelectedSlots]}
            >
                <div
                    ref={gridWrapper}
                    css={css`
                        flex-grow: 1;
                        position: relative;
                        z-index: 1;
                        background-color: ${theme.colors.unavailable};
                    `}
                    className={`${theme.prefix}__grid`}
                >
                    {!status.loading ? (
                        <DayColumnWrapper>
                            {slots.map(day => (
                                <DayColumnDisplay key={day.day} day={day} />
                            ))}
                        </DayColumnWrapper>
                    ) : null}
                    <TimeLines />
                    <div
                        ref={hoverElement}
                        css={css`
                            position: absolute;
                            z-index: 2;
                            display: none;
                            width: ${theme.sizes.columnWidth}px;
                            height: ${hoverHeight}px;
                            top: ${hover.position.y}px;
                            left: ${hover.position.x *
                                theme.sizes.columnWidth}px;
                        `}
                        className={`${theme.prefix}__hover-positioner ${theme.prefix}__hover-positioner--main`}
                    >
                        <HoverSlot
                            available={hover.available}
                            times={tooltipText}
                            topSlot={hover.topSlot}
                        />
                    </div>
                    <DayColumnWrapper layer={4}>
                        {slots.map((day, columnCount) => (
                            <DayColumn
                                key={day.day}
                                columnCount={columnCount}
                                day={day}
                            />
                        ))}
                    </DayColumnWrapper>
                    {!objectIsEmpty(selectedSlots) &&
                    status.mode === "confirm" ? (
                        <SelectionMask />
                    ) : null}
                    <SelectedSlots bounds={[slots[0].day, slots[6].day]} />
                    <div
                        ref={hoverElementTooltip}
                        css={css`
                            position: absolute;
                            z-index: 5;
                            display: none;
                            pointer-events: none;
                            user-select: none;
                            top: ${hover.position.y}px;
                            left: ${hover.position.x *
                                theme.sizes.columnWidth}px;
                            width: ${theme.sizes.columnWidth}px;
                            height: ${hoverHeight}px;
                        `}
                        className={`${theme.prefix}__hover-positioner ${theme.prefix}__hover-positioner--tooltip`}
                    >
                        {!hover.hideTooltip ? (
                            <HoverTooltip
                                available={hover.available}
                                times={tooltipText}
                                topSlot={hover.topSlot}
                            />
                        ) : null}
                    </div>
                    {status.loading ? <Loading /> : null}
                    {status.preloading ? <Preloading /> : null}
                    {status.error ? (
                        <Error message={i18n.t("global_error")} theme={theme} />
                    ) : null}
                </div>
            </SelectionContext.Provider>
        </HoverContext.Provider>
    );
};

export default Week;
