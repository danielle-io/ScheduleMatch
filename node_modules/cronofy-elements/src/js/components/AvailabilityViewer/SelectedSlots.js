import React, { useContext } from "react";
import { css, jsx } from "@emotion/core";
import moment from "moment-timezone";

import { ThemeContext } from "./AvailabilityViewer";
import { SelectionContext } from "./Week";

import SelectedSlot from "./SelectedSlot";

import { objectToArray } from "../../helpers/utils";

const SelectedSlots = ({ bounds }) => {
    const [theme, setTheme] = useContext(ThemeContext);
    const [selectedSlots, setSelectedSlots] = useContext(SelectionContext);

    const mappableSlots = objectToArray(selectedSlots);
    let sortedMappableSlots = mappableSlots.sort((a, b) => {
        if (
            moment(a.key, "YYYY-MM-DDTHH:mm:00Z") <
            moment(b.key, "YYYY-MM-DDTHH:mm:00Z")
        ) {
            return -1;
        }
        if (
            moment(a.key, "YYYY-MM-DDTHH:mm:00Z") >
            moment(b.key, "YYYY-MM-DDTHH:mm:00Z")
        ) {
            return 1;
        }
        return 0;
    });

    if (typeof bounds !== "undefined") {
        const limits = [
            moment(bounds[0], "YYYY-MM-DD").startOf("day"),
            moment(bounds[1], "YYYY-MM-DD").endOf("day")
        ];
        sortedMappableSlots = sortedMappableSlots.filter(item => {
            const beforeStart = moment(
                item.value.slot.start,
                "YYYY-MM-DDTHH:mm:00Z"
            ).diff(limits[0], "minutes");
            const afterEnd = moment(
                item.value.slot.end,
                "YYYY-MM-DDTHH:mm:00Z"
            ).diff(limits[1], "minutes");
            return beforeStart >= 0 && afterEnd <= 0;
        });
    }

    const slotsMarkup = sortedMappableSlots.map((item, i) => {
        let activeSlot = item.value;
        return (
            <React.Fragment key={`selected_${i}`}>
                <div
                    css={css`
                        height: ${theme.slotHeightCalc.height *
                            theme.slotHeightCalc.multiple}px;
                        position: absolute;
                        z-index: 5;
                        top: ${activeSlot.position.y}px;
                        left: ${activeSlot.position.x *
                            theme.sizes.columnWidth}px;
                        width: ${theme.sizes.columnWidth}px;
                        display: flex;
                        justify-content: center;
                        pointerevents: auto;
                    `}
                    className={`${theme.prefix}__selection-positioner`}
                >
                    <SelectedSlot slotDetails={activeSlot} />
                </div>
            </React.Fragment>
        );
    });

    return <React.Fragment>{slotsMarkup}</React.Fragment>;
};

export default SelectedSlots;
