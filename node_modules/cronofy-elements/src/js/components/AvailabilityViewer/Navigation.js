import React, { useContext } from "react";
import { css, jsx } from "@emotion/core";

import { buttonReset } from "../../styles/utils";

import {
    LoggingContext,
    I18nContext,
    StatusContext,
    ThemeContext,
    WeeksContext
} from "./AvailabilityViewer";

const Navigation = () => {
    const log = useContext(LoggingContext);
    const [theme, setTheme] = useContext(ThemeContext);
    const [status, setStatus] = useContext(StatusContext);
    const i18n = useContext(I18nContext);
    const [weeks, setWeeks] = useContext(WeeksContext);

    const navigateWeek = nextPrev => {
        if (typeof nextPrev !== "number") {
            log.warn("navigateWeek called without a number");
        }

        let newWeeks = { ...weeks };

        // Calculate new week
        let newWeek = newWeeks.current + nextPrev;

        if (nextPrev > 0) {
            newWeek = newWeek > newWeeks.total ? newWeeks.total : newWeek;
        }

        if (nextPrev < 0) {
            newWeek = newWeek <= 1 ? 1 : newWeek;
        }

        newWeeks.current = newWeek;

        const dataIsPreloaded = status.weeksLoaded.includes(newWeek);

        setStatus({
            ...status,
            error: false,
            loading: !dataIsPreloaded,
            preloading: dataIsPreloaded
        });
        setWeeks({ ...newWeeks });
    };

    const navButton = css`
        ${buttonReset};
        display: block;
        cursor: pointer;
        position: relative;
        background: ${theme.colors.primary};
        color: ${theme.colors.white};
        padding: 10px;
        border-radius: 2px;
        border: 1px solid ${theme.colors.primary};
        width: 32px;
        height: 33px;
        text-align: center;
        margin-left: 4px;
    `;

    const icon = css`
        position: absolute;
        top: 50%;
        right: 50%;
        width: 16px;
        height: 16px;
        fill: ${theme.colors.white};
        transform: translate(50%, -50%);
        pointer-events: none;
    `;

    const disabledButton = css`
        background: ${theme.colors.white};
        border-color: ${theme.colors.hairline};
    `;
    const disabledIcon = css`
        fill: ${theme.colors.hairline};
    `;

    const buttonOneStyles = css`
        ${navButton};
        ${weeks.current <= 1 ? disabledButton : ""}
    `;
    const buttonTwoStyles = css`
        ${navButton};
        ${weeks.current >= weeks.total ? disabledButton : ""}
    `;

    return (
        <React.Fragment>
            {weeks.total > 0 ? (
                <div
                    className={`${theme.prefix}__navigation`}
                    css={css`
                        display: flex;
                        justify-content: flex-end;
                    `}
                >
                    <button
                        type="button"
                        onClick={() => navigateWeek(-1)}
                        css={buttonOneStyles}
                        disabled={weeks.current <= 1 ? true : false}
                        className={`${theme.prefix}__button ${theme.prefix}__button--prev`}
                    >
                        <span className={"visuallyhidden"}>
                            {i18n.t("previous")}
                        </span>
                        <svg
                            css={css`
                                ${icon};
                                transform: translate(50%, -50%) rotate(180deg);
                                transform-origin: 50% 50%;
                                ${weeks.current <= 1 ? disabledIcon : ""}
                            `}
                            className={`${theme.prefix}__icon ${theme.prefix}__icon--prev`}
                        >
                            <use xlinkHref={`#arrow`} />
                        </svg>
                    </button>
                    <button
                        type="button"
                        onClick={() => navigateWeek(1)}
                        css={buttonTwoStyles}
                        className={`${theme.prefix}__button ${theme.prefix}__button--next`}
                        disabled={weeks.current >= weeks.total ? true : false}
                    >
                        <span className={"visuallyhidden"}>
                            {i18n.t("next")}
                        </span>
                        <svg
                            css={css`
                                ${icon};
                                ${weeks.current >= weeks.total
                                    ? disabledIcon
                                    : ""}
                            `}
                            className={`${theme.prefix}__icon ${theme.prefix}__icon--next`}
                        >
                            <use xlinkHref={`#arrow`} />
                        </svg>
                    </button>
                </div>
            ) : null}
        </React.Fragment>
    );
};

export default Navigation;
