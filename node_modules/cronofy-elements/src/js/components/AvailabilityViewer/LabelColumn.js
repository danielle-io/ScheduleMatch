import React, { useContext, useState } from "react";
import moment from "moment-timezone";
import { css, jsx } from "@emotion/core";

import { I18nContext, ThemeContext, StatusContext } from "./AvailabilityViewer";
import { LabelsContext } from "./WeekWrapper";
import TimeSelector from "./TimeSelector";
import TimeSelectorTrigger from "./TimeSelectorTrigger";

const LabelColumn = () => {
    const [selectionVisibility, setSelectionVisibility] = useState(false);
    const i18n = useContext(I18nContext);
    const [status, setStatus] = useContext(StatusContext);
    const [theme, setTheme] = useContext(ThemeContext);
    const labels = useContext(LabelsContext);

    const height = theme.slotHeightCalc.height;

    const handleCalendarSelection = () => {
        setSelectionVisibility(!selectionVisibility);
    };

    const labelsOutput = labels.map(label => {
        let labelText = null;

        const localStart = moment
            .utc(label.start, "YYYY-MM-DDTHH:mm:00Z")
            .tz(status.tzid);

        if (label.hour) {
            labelText = (
                <span
                    css={css`
                        display: block;
                        width: 100%;
                        position: absolute;
                        top: -1px;
                        right: 4px;
                        color: ${theme.colors.black};
                        line-height: 1;
                        font-size: 12px;
                        text-transform: lowercase;
                        text-align: right;
                        padding: 0 4px;
                        @media (max-width: 650px) {
                            right: auto;
                            left: 0;
                            top: 2px;
                            text-align: left;
                        }
                    `}
                    className={`${theme.prefix}__time-text`}
                >
                    {i18n.f(localStart, "LT").replace(" ", "")}
                </span>
            );
        }
        return (
            <div
                key={label.start}
                css={css`
                    display: block;
                    height: ${height}px;
                    position: relative;
                `}
                className={`${theme.prefix}__time-label`}
            >
                {labelText}
            </div>
        );
    });
    return (
        <div
            css={css`
                width: ${theme.sizes.labelWidth}px;
                flex-grow: 0;
                flex-shrink: 0;
                position: relative;
                z-index: 2;
                @media (max-width: 650px) {
                    position: absolute;
                    top: 0;
                    left: 0;
                    z-index: 4;
                    user-select: none;
                    pointer-events: none;
                }
            `}
            className={`${theme.prefix}__time-labels`}
        >
            {selectionVisibility ? (
                <TimeSelector done={handleCalendarSelection} />
            ) : null}
            {status.boundsControl ? (
                <TimeSelectorTrigger
                    handleCalendarSelection={handleCalendarSelection}
                />
            ) : null}
            {labelsOutput}
        </div>
    );
};

export default LabelColumn;
