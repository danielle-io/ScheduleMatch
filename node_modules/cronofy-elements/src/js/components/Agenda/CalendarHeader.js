import React, { useContext } from "react";
import moment from "moment-timezone";
import { css, jsx } from "@emotion/core";

import { buttonReset } from "../../styles/utils";

import { I18nContext, ThemeContext } from "./Agenda";

const CalendarHeader = ({ date, nextPrev, limit }) => {
    const theme = useContext(ThemeContext);
    const i18n = useContext(I18nContext);

    const navButtonBaseStyles = css`
        ${buttonReset};
        width: 2em;
        position: relative;
        cursor: pointer;
        &:before {
            content: "";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%) rotate(45deg);
            display: block;
            width: 1em;
            height: 1em;
        }
        &:focus {
            outline: none;
            background: ${theme.colors.cream};
        }
        &:active {
            background: darken(${theme.colors.cream}, 5%);
        }
    `;

    const dateObject = moment(date);
    return (
        <div
            css={css`
                margin-top: 16px;
                border-top: 1px solid ${theme.colors.hairline};
                border-bottom: 1px solid ${theme.colors.hairline};
                // border-radius: 4px;
                margin-bottom: 16px;
                display: flex;
                position: relative;
                flex-shrink: 0;
            `}
            className={`${theme.prefix}__header`}
        >
            {!dateObject.isSame(new Date(), "day") ? (
                <button
                    type="button"
                    css={css`
                        ${buttonReset};
                        position: absolute;
                        top: 0;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        border: 1px solid ${theme.colors.hairline};
                        border-radius: 4px;
                        padding: 6px 8px;
                        line-height: 16px;
                        background: ${theme.colors.white};
                        transition: background 0.2s;
                        cursor: pointer;
                        &:hover {
                            background: ${theme.colors.greyPale};
                        }
                    `}
                    className={`${theme.prefix}__today`}
                    onClick={() => nextPrev("today")}
                >
                    {i18n.t("go_to_today")}
                </button>
            ) : (
                <span
                    css={css`
                        position: absolute;
                        top: 0;
                        left: 50%;
                        transform: translate(-50%, 0%);
                        color: ${theme.colors.hairline};
                    `}
                    className={`${theme.prefix}__today--current`}
                >
                    {i18n.t("today")}
                </span>
            )}

            {limit != -1 ? (
                <button
                    type="button"
                    css={css`
                        ${navButtonBaseStyles};
                        &:before {
                            border-left: 2px solid ${theme.colors.greyMid};
                            border-bottom: 2px solid ${theme.colors.greyMid};
                        }
                    `}
                    className={`${theme.prefix}__nav ${theme.prefix}__nav--prev`}
                    onClick={() => nextPrev("prev")}
                >
                    <span className="visuallyhidden">{i18n.t("previous")}</span>
                </button>
            ) : null}

            <div
                css={css`
                    flex-grow: 1;
                    padding: 16px 0;
                    display: flex;
                    align-items: center;
                `}
                className={`${theme.prefix}__nav-date`}
            >
                <div
                    css={css`
                        font-size: 48px;
                        line-height: 1;
                    `}
                    className={`${theme.prefix}__nav-date__number-wrapper`}
                >
                    <span className={`${theme.prefix}__nav-date__number`}>
                        {i18n.f(dateObject, "D")}
                    </span>
                    <span
                        css={css`
                            // text-transform: uppercase;
                            position: relative;
                            top: -1.6em;
                            font-size: 16px;
                        `}
                        className={`${theme.prefix}__nav-date__ordinal`}
                    >
                        {i18n.f(dateObject, "Do").replace(/[0-9]/g, "")}
                    </span>
                </div>
                <div
                    css={css`
                        margin-left: 10px;
                    `}
                >
                    <span
                        css={css`
                            display: block;
                            line-height: 1;
                            padding-bottom: 4px;
                        `}
                        className={`${theme.prefix}__nav-date__day`}
                    >
                        {i18n.f(dateObject, "dddd")}
                    </span>
                    <span
                        css={css`
                            display: block;
                            line-height: 1;
                        `}
                        className={`${theme.prefix}__nav-date__month`}
                    >
                        {i18n.f(dateObject, "MMMM")}
                    </span>
                </div>
            </div>

            {limit != 1 ? (
                <button
                    type="button"
                    css={css`
                        ${navButtonBaseStyles};
                        &:before {
                            border-right: 2px solid ${theme.colors.greyMid};
                            border-top: 2px solid ${theme.colors.greyMid};
                        }
                    `}
                    className={`${theme.prefix}__nav ${theme.prefix}__nav--next`}
                    onClick={() => nextPrev("next")}
                >
                    <span className="visuallyhidden">{i18n.t("next")}</span>
                </button>
            ) : null}
        </div>
    );
};

export default CalendarHeader;
