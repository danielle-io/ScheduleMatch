import React, { useState, useEffect } from "react";
import moment from "moment-timezone";

import * as connections from "../../helpers/connections";
import * as utils from "../../helpers/events";
import { parseStyleOptions } from "../../helpers/theming";
import { i18nConstructor } from "../../helpers/i18n";
import { logConstructor } from "../../helpers/logging";

import Calendar from "./Calendar";
import Container from "../generic/Container";
import Error from "../generic/Error";

export const CalendarsContext = React.createContext();
export const LoggingContext = React.createContext();
export const EventsContext = React.createContext();
export const I18nContext = React.createContext();
export const StatusContext = React.createContext();
export const ThemeContext = React.createContext();

const Agenda = ({ options }) => {
    const [log, setLog] = useState(
        logConstructor(options.config.logs, "Agenda View")
    );

    const [i18n, setI18n] = useState(
        i18nConstructor("agenda", options.locale, options.translations)
    );

    const [status, setStatus] = useState({
        active_date: i18n.f(moment(new Date()), `YYYY-MM-DD`),
        direction: "forwards",
        expanded: false,
        loading: true,
        error: false,
        locale: options.locale
    });

    const [theme, setTheme] = useState({
        ...parseStyleOptions(options.styles, "CronofyAgenda", options)
    });

    const [eventData, setEventData] = useState({
        events: {},
        days: {}
    });

    const [calendars, setCalendars] = useState([]);

    const [currentEvents, setCurrentEvents] = useState([]);

    const [state, setState] = useState({
        args: {
            tzid: "Europe/London",
            include_managed: true,
            from: i18n.f(moment(new Date()).add(-7, "days"), `YYYY-MM-DD`),
            to: i18n.f(moment(new Date()).add(7, "days"), `YYYY-MM-DD`),
            calendar_ids: [
                "cal_W5elKlyS6wzAQA@8_l7Ru5zMU3807cP8TSG87yQ",
                "cal_W5elKlyS6wzAQA@8_6bfDwZ220BB8vFN-NjTfcg"
            ]
        },
        offset: 7
    });

    const getCurrentEvents = () => {
        // get event IDs for the active date.
        const eventIDs = eventData.days[status.active_date];
        // get all the events
        const allEvents = eventData.events;
        // create an array of all events who's IDs are in the active date IDs list
        const currentEvents = [];
        for (const event in eventIDs) {
            currentEvents.push(allEvents[event]);
        }
        setCurrentEvents(currentEvents);
    };

    const triggerGetEvents = () =>
        connections
            .getEvents(
                options.token,
                options.domains.apiDomain,
                state.args,
                connections.loadNextPage,
                options.demo
            )
            .then(res => {
                const calendarsFromUserinfo = connections.parseUserInfoCalendars(
                    res.userinfo
                );
                setCalendars(calendarsFromUserinfo);

                const eventsDayRange = utils.getDayRange(
                    status.active_date,
                    state.offset,
                    eventData.days
                );

                const parsedEvents = utils.parseEvents(res.events);

                const eventsDays = utils.setEventDayIDs(
                    parsedEvents,
                    eventsDayRange
                );
                const eventsObj = utils.parseEventsByID(
                    parsedEvents,
                    state.events
                );
                setEventData({
                    days: eventsDays,
                    events: { ...eventData.events, ...eventsObj }
                });
                setStatus({ ...status, loading: false });
            })
            .catch(error => {
                const errorMessage = error.message ? error.message : error;
                const errorOutput = {};
                if (error.docsSlug) {
                    errorOutput.docsSlug = error.docsSlug;
                }
                log.error(errorMessage, errorOutput);
                setStatus({ ...status, loading: false, error: error });
            });

    const resetArgsByOffset = from => {
        const args = { ...state.args };

        const fromObj = moment(from).add(0 - state.offset, "days");
        const toObj = moment(from).add(state.offset, "days");

        args.from = i18n.f(fromObj, `YYYY-MM-DD`);
        args.to = i18n.f(toObj, `YYYY-MM-DD`);
        setState({
            ...state,
            args
        });
    };

    const setDates = (target, direction) => {
        resetArgsByOffset(target);
        setStatus({ ...status, active_date: target, direction });
    };

    const navigate = action => {
        const oldFrom = moment(status.active_date);
        let newDate;
        switch (action) {
            case "today":
                const today = moment(new Date());
                const diff = utils.checkDirection(today, oldFrom);
                newDate = i18n.f(today, "YYYY-MM-DD");
                setDates(newDate, diff);
                break;
            case "prev":
                newDate = oldFrom.subtract(1, "days");
                setDates(i18n.f(newDate, "YYYY-MM-DD"), "backwards");
                break;
            case "next":
                setStatus({ ...status, direction: "forwards" });
            default:
                newDate = oldFrom.add(1, "days");
                setDates(i18n.f(newDate, "YYYY-MM-DD"), "forwards");
        }
    };

    const setExpanded = id => {
        const direction = id ? "upwards" : "downwards";
        setStatus({ ...status, expanded: id, direction });
    };

    useEffect(() => {
        const targetDate = status.active_date;
        const loadedDays = { ...eventData.days };
        const dayExistsInState = loadedDays.hasOwnProperty(targetDate);
        if (!dayExistsInState) {
            setStatus({ ...status, loading: true });
            triggerGetEvents();
        }
    }, [status.active_date]);

    useEffect(() => {
        getCurrentEvents();
    }, [eventData, status.active_date]);

    return (
        <Container minHeight="500px" className={`${theme.prefix}`}>
            {status.error ? (
                <Error message={i18n.t("global_error")} theme={theme} />
            ) : (
                <LoggingContext.Provider value={log}>
                    <I18nContext.Provider value={i18n}>
                        <ThemeContext.Provider value={theme}>
                            <StatusContext.Provider value={[status, setStatus]}>
                                <CalendarsContext.Provider value={calendars}>
                                    <EventsContext.Provider
                                        value={currentEvents}
                                    >
                                        <Calendar
                                            nextPrev={navigate}
                                            expand={setExpanded}
                                        />
                                    </EventsContext.Provider>
                                </CalendarsContext.Provider>
                            </StatusContext.Provider>
                        </ThemeContext.Provider>
                    </I18nContext.Provider>
                </LoggingContext.Provider>
            )}
        </Container>
    );
};

export default Agenda;
