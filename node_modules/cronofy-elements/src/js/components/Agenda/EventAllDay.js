import React, { useContext } from "react";

import EventWrapper from "./EventWrapper";
import EventTime from "./EventTime";
import { getMultiDayStatus, getCalColor } from "../../helpers/events";
import { truncateString } from "../../helpers/utils";

import { CalendarsContext, ThemeContext } from "./Agenda";

const EventAllDay = props => {
    const theme = useContext(ThemeContext);
    const calendars = useContext(CalendarsContext);

    const calIndex = getCalColor(props.data.calendar_id, calendars);
    const multiDayStatus = getMultiDayStatus(
        props.data.start,
        props.data.end,
        props.current
    );
    return (
        <EventWrapper
            calIndex={calIndex}
            data={props.data}
            expand={props.expand}
            transparency={"transparent"}
            className={`
                ${theme.prefix}__event--line
                ${
                    multiDayStatus === 1 || multiDayStatus === 3
                        ? `${theme.prefix}__event--has-after`
                        : ""
                }
                ${
                    multiDayStatus === 2 || multiDayStatus === 3
                        ? `${theme.prefix}__event--has-before`
                        : ""
                }
            `}
        >
            {multiDayStatus === 1 || multiDayStatus === 3 ? (
                <svg className={`${theme.prefix}__after-icon`}>
                    <use xlinkHref="#triangle" />
                </svg>
            ) : null}
            {multiDayStatus === 2 || multiDayStatus === 3 ? (
                <svg className={`${theme.prefix}__before-icon`}>
                    <use xlinkHref="#triangle" />
                </svg>
            ) : null}
            <span
                className={`${theme.prefix}__event__title`}
                title={props.data.summary}
            >
                {truncateString(props.data.summary, 40)}
            </span>
            <EventTime
                start={props.data.start}
                end={props.data.end}
                current={props.current}
                recurring={props.data.recurring}
            />
            {props.data.attendees && props.data.attendees.length > 1 ? (
                <div className={`${theme.prefix}__event__attendees`}>
                    <span className={`${theme.prefix}__event__attendee`} />
                    <span className={`${theme.prefix}__event__attendee`} />
                    <span className={`${theme.prefix}__event__attendee-count`}>
                        {props.data.attendees.length}
                    </span>
                </div>
            ) : null}
        </EventWrapper>
    );
};

export default EventAllDay;
