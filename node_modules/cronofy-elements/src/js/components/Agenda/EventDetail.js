import React, { useContext } from "react";
import { css, jsx } from "@emotion/core";
import moment from "moment-timezone";

import EventWrapper from "./EventWrapper";
import EventMessages from "./EventMessages";
import EventAttendees from "./EventAttendees";
import EventTime from "./EventTime";
import Location from "./Location";

import { getCalColor } from "../../helpers/events";
import { getCalendarColors } from "../../helpers/colors";

import { CalendarsContext, I18nContext, ThemeContext } from "./Agenda";

const EventDetails = props => {
    const i18n = useContext(I18nContext);
    const theme = useContext(ThemeContext);
    const calendars = useContext(CalendarsContext);
    const calIndex = getCalColor(props.event.calendar_id, calendars);
    let colors = getCalendarColors(theme.colors, calIndex);
    return (
        <EventWrapper
            calIndex={calIndex}
            data={props.event}
            expand={() => props.expand(false)}
            css={css`
                padding: 2em 1em;
                display: flex;
                flex-direction: column;
                height: 100%;

                .${theme.prefix}__event__title--expanded {
                    font-size: 1.4em;
                    margin-bottom: 0.5em;
                }

                .${theme.prefix}__event__subtitle {
                    font-size: 0.8em;
                    text-transform: uppercase;
                    letter-spacing: 0.1em;
                    display: inline-block;
                    margin: 1em 0 0.5em 0;
                }

                .${theme.prefix}__event__date--expanded {
                    font-size: 0.8em;
                    display: block;
                }

                .${theme.prefix}__event__description-inner {
                    white-space: pre-line;
                    margin: 1em 0;
                    border-left: 2px solid ${colors.text};
                    padding-left: 0.5em;
                }

                &.${theme.prefix}__event--expanded
                    .${theme.prefix}__event__description-inner {
                    border-left: 2px solid ${colors.black};
                }
            `}
            className={`${theme.prefix}__event--expanded`}
        >
            <EventMessages data={props.event} />
            <span
                className={`${theme.prefix}__event__title ${theme.prefix}__event__title--expanded`}
            >
                {props.event.summary}
            </span>
            <span className={`${theme.prefix}__event__date--expanded`}>
                {i18n.f(moment(props.date), "LL")}
            </span>
            <EventTime
                start={props.event.start}
                end={props.event.end}
                current={props.date}
                recurring={props.event.recurring}
            />
            {props.event.description ? (
                <div className={`${theme.prefix}__event__description`}>
                    <h3 className={`${theme.prefix}__event__subtitle`}>
                        Description
                    </h3>
                    <div
                        className={`${theme.prefix}__event__description-inner`}
                    >
                        {props.event.description}
                    </div>
                </div>
            ) : null}
            <EventAttendees attendees={props.event.attendees} />
            {props.event.location ? (
                <div className={`${theme.prefix}__event__location--expanded`}>
                    <h3 className={`${theme.prefix}__event__subtitle`}>
                        Location
                    </h3>
                    <Location
                        locationString={props.event.location.description}
                        calIndex={calIndex}
                        styles={css`
                            display: block;
                        `}
                    >
                        {props.event.location.description}
                    </Location>{" "}
                </div>
            ) : null}
        </EventWrapper>
    );
};

export default EventDetails;
