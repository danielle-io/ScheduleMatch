import React, { useContext } from "react";
import moment from "moment-timezone";
import { css, jsx } from "@emotion/core";

import Loading from "../generic/Loading";
import TransitionSlide from "../generic/TransitionSlide";
import CalendarHeader from "./CalendarHeader";
import EventDetail from "./EventDetail";
import Message from "./Message";
import AllDayEventsList from "./AllDayEventsList";
import TimedEventsList from "./TimedEventsList";

import {
    getEventByID,
    calculateLimit,
    sortEventsByType
} from "../../helpers/events";

import {
    EventsContext,
    I18nContext,
    StatusContext,
    ThemeContext
} from "./Agenda";

const Calendar = props => {
    const theme = useContext(ThemeContext);
    const [status] = useContext(StatusContext);
    const i18n = useContext(I18nContext);
    const events = useContext(EventsContext);

    const today = i18n.f(moment(new Date()), "YYYY-MM-DD");
    const limit = calculateLimit(status.active_date, today);
    const eventsByType = sortEventsByType(events);
    const expandedEvent = getEventByID(status.expanded, events);

    return (
        <TransitionSlide
            styles={css`
                flex-grow: 1;
            `}
            direction={status.direction}
            keyProp={`${status.active_date}_${
                expandedEvent ? expandedEvent.event_uid : "false"
            }`}
        >
            <div
                css={css`
                    display: flex;
                    flex-grow: 1;
                    flex-direction: column;
                    width: 100%;

                    .shadow-scroll {
                        display: flex;
                        flex-grow: 1;
                        flex-shrink: 1;
                    }
                `}
                className={`${theme.prefix}__day`}
            >
                {!expandedEvent ? (
                    <React.Fragment>
                        <CalendarHeader
                            date={status.active_date}
                            nextPrev={props.nextPrev}
                            limit={limit}
                        />
                        <div
                            css={css`
                                flex-grow: 1;
                                flex-shrink: 1;
                                display: flex;
                                flex-direction: column;
                            `}
                            className={`${theme.prefix}__body`}
                        >
                            <Loading
                                loading={status.loading}
                                prefix={theme.prefix}
                            >
                                {events.length > 0 ? (
                                    <React.Fragment>
                                        <AllDayEventsList
                                            events={eventsByType.allDay}
                                            date={status.active_date}
                                            expand={props.expand}
                                        />
                                        <TimedEventsList
                                            events={eventsByType.timed}
                                            date={status.active_date}
                                            expand={props.expand}
                                        />
                                    </React.Fragment>
                                ) : (
                                    <Message
                                        message={i18n.t("no_events")}
                                        prefix={theme.prefix}
                                    />
                                )}
                            </Loading>
                        </div>
                    </React.Fragment>
                ) : (
                    <EventDetail
                        event={expandedEvent}
                        current={status.active_date}
                        data={expandedEvent}
                        expand={props.expand}
                    />
                )}
            </div>
        </TransitionSlide>
    );
};

export default Calendar;
